{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://lms-ng-fhir/lib/fhir/fhir-config.ts","ng://lms-ng-fhir/lib/fhir/r4/model/element.ts","ng://lms-ng-fhir/lib/fhir/r4/model/resource.ts","ng://lms-ng-fhir/lib/fhir/r4/model/domain-resource.ts","ng://lms-ng-fhir/lib/fhir/r4/model/meta.ts","ng://lms-ng-fhir/lib/fhir/r4/model/extension.ts","ng://lms-ng-fhir/lib/fhir/r4/model/narrative.ts","ng://lms-ng-fhir/lib/fhir/r4/model/period.ts","ng://lms-ng-fhir/lib/fhir/r4/model/range.ts","ng://lms-ng-fhir/lib/fhir/r4/model/reference.ts","ng://lms-ng-fhir/lib/fhir/r4/model/ratio.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/humanname.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/person.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/address.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/attachment.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/group.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/patient.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/practitioner.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/practitionerrole.ts","ng://lms-ng-fhir/lib/fhir/r4/model/individuals/relatedperson.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/backboneelement.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/codeableconcept.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/codesystem.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/codesystemconcept.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/coding.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/conceptmap.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/conceptmapdependson.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/contactdetail.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/contactpoint.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/identifier.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/namingsystem.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/quantity.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/simple-quantity.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/terminologycapabilities.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/usagecontext.ts","ng://lms-ng-fhir/lib/fhir/r4/model/terminology/valueset.ts","ng://lms-ng-fhir/lib/fhir/r4/model/conformance/capability-statement.ts","ng://lms-ng-fhir/lib/fhir/r4/model/misc/bundle.ts","ng://lms-ng-fhir/lib/fhir/r4/model/misc/bundle-entry.ts","ng://lms-ng-fhir/lib/fhir/r4/model/management/encounter.ts","ng://lms-ng-fhir/lib/fhir/r4/model/management/episodeofcare.ts","ng://lms-ng-fhir/lib/fhir/r4/model/management/flag.ts","ng://lms-ng-fhir/lib/fhir/r4/model/management/library.ts","ng://lms-ng-fhir/lib/fhir/r4/model/management/list.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/dosage.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/duration.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication-administration.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication-dispense.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication-knowledge.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication-request.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication-statement.ts","ng://lms-ng-fhir/lib/fhir/r4/model/medications/medication.ts","ng://lms-ng-fhir/lib/fhir/r4/model/money.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_1/endpoint.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_1/healthcareservice.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_1/location.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_1/organization.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_1/organizationaffiliation.ts","ng://lms-ng-fhir/lib/fhir/r4/model/general/account.ts","ng://lms-ng-fhir/lib/fhir/r4/model/general/coverage.ts","ng://lms-ng-fhir/lib/fhir/r4/model/general/contract.ts","ng://lms-ng-fhir/lib/fhir/r4/model/general/chargeItemDefinition.ts","ng://lms-ng-fhir/lib/fhir/r4/model/signature.ts","ng://lms-ng-fhir/lib/fhir/r4/model/other/operation-outcome.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/annotation.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/appointment.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/appointmentresponse.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/schedule.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/slot.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/task.ts","ng://lms-ng-fhir/lib/fhir/r4/model/workflow/verificationresult.ts","ng://lms-ng-fhir/lib/fhir/r4/model/timing.ts","ng://lms-ng-fhir/lib/fhir/r4/model/entities_2/substance.ts","ng://lms-ng-fhir/lib/fhir/r4/model/billing/invoice.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-service.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-advanced.service.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-address-line-extract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-contact-extract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-dosage-exctract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-email-extract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-patient-name-extract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-telecom-phone-extract.pipe.ts","ng://lms-ng-fhir/lib/fhir/r4/fhir-pipes/fhir-telecom-web-extract.pipe.ts","ng://lms-ng-fhir/lib/lms-ng-fhir.module.ts","ng://lms-ng-fhir/lib/fhir/r4/query-builder/fhir-query-builder.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/search-item.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/modifiers/equal-search-modifier.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/modifiers/string-contains-search-modifier.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/modifiers/string-exact-search-modifier.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/search-modifiers.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/search-set-builder.ts","ng://lms-ng-fhir/lib/fhir/r4/search-set/search-set.ts","ng://lms-ng-fhir/lib/fhir/r4/resource-types.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","FHIR_CONFIG","InjectionToken","FhirConfig","Injectable","Element","Resource","DomainResource","tslib_1.__extends","Meta","Extension","Narrative","Period","source","_this","_super","_b","tslib_1.__values","keys","_c","key","Range","Reference","Ratio","HumanName","given","prefix","suffix","getNew","use","Person","resourceType","name","Address","Attachment","Group","apply","arguments","Patient","Practitioner","PractitionerRole","RelatedPerson","BackboneElement","CodeableConcept","CodeSystem","CodeSystemConcept","Coding","ConceptMap","ConceptMapDependsOn","ContactDetail","ContactPoint","Identifier","NamingSystem","Quantity","SimpleQuantity","TerminologyCapabilities","UsageContext","ValueSet","ResourceCapability","CapabilityStatement","Bundle","BundleEntry","Encounter","EpisodeOfCare","Flag","Library","List","Dosage","Duration","MedicationAdministration","MedicationDispense","MedicationKnowledge","MedicationRequest","MedicationStatement","Medication","Money","Endpoint","HealthcareService","Location","Organization","OrganizationAffiliation","Account","Coverage","Contract","ChargeItemDefinition","Signature","OperationOutcome","Annotation","Appointment","AppointmentResponse","Schedule","Slot","Task","VerificationResult","Timing","Substance","Invoice","FhirService","config","httpClient","defineProperty","base","getConformanceStatement","headers","mergedHeaders","assign","conformance","of","get","pipe","tap","result","read","id","vread","v","update","resource","put","save","patch","body","headersToAttach","merge","delete","post","searchByQuery","qb","resourceName","params","paramsAsHttpParams","searchBySet","ss","paramsAsObject","searchByUrl","url","search_all","capabilities","transaction","bundle","history","history_type","history_all","executeQuery","query","createTransactionBundle","type","entry","filter","map","isIterable","v_1","v_1_1","e","push","createBundleEntry","fullUrl","uuid","request","method","args","providedIn","decorators","Inject","HttpClient","FhirAdvancedService","fhircqrs","setAuthentication","searchInConcept","part","version","findActiveEncounterByPatient","patientId","ConceptDto","FhirAddressLineExtract","transform","_i","line","Pipe","FhirContactExtractPipe","contact","family","FhirDosageExctractPipe","doseAndRate","doseQuantity","unit","rateQuantity","maxDosePerAdministration","text","FhirEmailExtractPipe","email","value_1","value_1_1","contactPoint","system","concat","trim","slice","FhirNameExtractPipe","FhirTelecomPhoneExtract","phone","FhirTelecomWebExtractPipe","LmsNgFhirModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","exports","InstanceLevelInteractions","TypeLevelInteractions","search","WholeSystemInteractions","batch","CommonSearchParameters","_id","_lastUpdated","_tag","_profile","_security","_text","_content","_list","_query","SearchControlParameters","FhirQueryBuilder","baseUrl","_baseUrl","_params","getInstance","_resourceName","setResourceName","q","_fhirOperation","forEach","propName","lp","LeftPart","left","and","append","val","res","se","paramParts","split","HttpParams","_qb","eq","contains","starts","exact","SearchItem","init","modifier","item","setType","setKey","setModifier","setValue","setOptions","options","compileKey","compileValue","EqualSearchModifier","si","StringContainsSearchModifier","StringExactSearchModifier","SearchModifiers","MODIFIERS","EQUAL","STRING:CONTAINS","STRING:EXACT","STRING","display","TOKEN","DATE","URI","REFERENCE","SearchSetBuilder","setTitle","title","setDescription","description","setGetpagesoffset","getpagesoffset","setCount","count","addSearchItem","searchItems","SearchSet","sort","so","String","build","ResourceTypes","BodyStructure","DataRequirement","DiagnosticReport","DiagnosticsReferenceRange","ImagingStudy","Media","MolecularSequence","Observation","ParameterDefinition","QuestionnaireResponse","QuestionnaireResponseItem","RelatedArtifact","SampledData","Specimen","ValueSetContains"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {InjectionToken} from '@angular/core';\nimport {Injectable} from '@angular/core';\n\nexport const FHIR_CONFIG = new InjectionToken<FhirConfig>('FhirConfig');\n\n@Injectable(\n    // { guess this doesn`t work, so you have to provide it in the appModule\n    //     providedIn: 'root',\n    // },\n)\nexport class FhirConfig {\n    base: string;\n    fhircqrs: string;\n}\n","import { Extension } from './extension';\n\nexport class Element {\n  id?: string;\n  extension?: Extension[];\n}\n","import { Meta } from './meta';\n\nexport class Resource {\n  id?: string; // Regex: [A-Za-z0-9\\-\\.]{1,64}\n  meta?: Meta;\n  implicitRules?: string; // uri\n  language?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n  resourceType?: string;\n  versionId?: string;\n  lastUpdated?: string;\n}\n","import {Resource} from './resource';\nimport {Extension} from './extension';\n\nexport class DomainResource extends Resource {\n    text?: string;\n    contained?: Resource[];\n    extension?: Extension[];\n    modifierExtension?: Extension[];\n}\n","import { Extension } from './extension';\nimport {Element} from './element';\n\nexport class Meta extends Element {\n  id: string;\n  extension?: Extension[];\n}\n","export class Extension {\n    url: string;\n    valueString?: string;\n    valueInteger?: number;\n    valueDecimal?: number;\n    valuePositiveInt?: number;\n    valueUnsignedInt?: number;\n\n    /*valueBase64Binary: base64Binary\n    valueBoolean: boolean\n    valueCanonical: canonical\n    valueCode: code (only if the extension definition provides a fixed binding to a suitable set of codes)\n    valueDate: date\n    valueDateTime: dateTime\n    valueId: id\n    valueInstant: instant\n    valueMarkdown: markdown\n    valueOid: oid\n    valueString: string\n    valueTime: time\n    valueUri: uri\n    valueUrl: url\n    valueUuid: uuid\n    valueAddress: Address\n    valueAge: Age\n    valueAnnotation: Annotation\n    valueAttachment: Attachment\n    valueCodeableConcept: CodeableConcept\n    valueCoding: Coding\n    valueContactPoint: ContactPoint\n    valueCount: Count\n    valueDistance: Distance\n    valueDuration: Duration\n    valueHumanName: HumanName\n    valueIdentifier: Identifier\n    valueMoney: Money\n    valuePeriod: Period\n    valueQuantity: Quantity\n    valueRange: Range\n    valueRatio: Ratio\n    valueReference: Reference - a reference to another resource\n    valueSampledData: SampledData\n    valueSignature: Signature\n    valueTiming: Timing\n    valueContactDetail: ContactDetail\n    valueContributor: Contributor\n    valueDataRequirement: DataRequirement\n    valueExpression: Expression\n    valueParameterDefinition: ParameterDefinition\n    valueRelatedArtifact: RelatedArtifact\n    valueTriggerDefinition: TriggerDefinition\n    valueUsageContext: UsageContext\n    valueDosage: Dosage*/\n}\n","import {Element} from './element';\n\nexport class Narrative extends Element {\n    status: 'generated' | 'extensions' | 'additional' | 'empty';\n    div: string; // Limited xhtml content\n}\n","import {Element} from './element';\n\nexport class Period extends Element {\n\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n\n  start?: Date;\n  end?: Date;\n  // tslint:disable-next-line:max-line-length\n  /*Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?*/\n}\n","import {SimpleQuantity} from './terminology/simple-quantity';\nimport {Element} from './element';\n\nexport class Range extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    low?: SimpleQuantity; // SimpleQuantity Low limit\n    high?: SimpleQuantity; // SimpleQuantity High limit\n}\n","import {Identifier} from './terminology/identifier';\nimport {Element} from './element';\n\nexport class Reference extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    reference?: string; // Regex: [ \\r\\n\\t\\S]+\n    type?: string; // uri\n    identifier?: Identifier;\n    display?: string;\n}\n","import {Element} from './element';\nimport {Quantity} from './index';\n\nexport class Ratio extends Element {\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n  numerator?: Quantity;\n  denominator?: Quantity;\n}\n","import { Element } from '../element';\nimport { Period } from '../period';\n\nexport class HumanName extends Element {\n\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    use?: 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'old' | 'maiden';\n    text?: string;\n    family?: string;\n    given?: string[] = [];\n    prefix?: string[] = [];\n    suffix?: string[] = [];\n    period?: Period;\n\n    public static getNew() {\n        return new HumanName({use: 'official', given: ['name']});\n    }\n}\n","import {Identifier} from '../terminology/identifier';\nimport {DomainResource} from '../domain-resource';\nimport {HumanName} from './humanname';\nimport {ContactPoint} from '../terminology/contactpoint';\nimport {Address} from './address';\nimport {Attachment} from './attachment';\nimport {Reference} from '../reference';\n\nexport class Person extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    resourceType: string = 'Person';\n    identifier?: Identifier[];\n    name?: HumanName[];\n    telecom?: ContactPoint[];\n    gender?: 'male' | 'female' | 'other' | 'unknown';\n    birthDate?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n    address?: Address[];\n    photo?: Attachment;\n    managingOrganization?: Reference; // (Organization)\n    active?: boolean;\n    link?: { // BackboneElement\n        target: Reference; // (Patient | Practitioner | RelatedPerson | Person)\n        assurance?: 'level1' | 'level2' | 'level3' | 'level4';\n    }[];\n\n    public static getNew() {\n        return new Person({name: [HumanName.getNew()]});\n    }\n}\n","import { Period } from '../period';\nimport { Element } from '../element';\n\nexport class Address extends Element {\n\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n\n  use?: 'home' | 'work' | 'temp' | 'old' | 'billing';\n  type?: 'postal' | 'physical' | 'both';\n  text?: string;\n  line?: string[];\n  city?: string;\n  district?: string;\n  state?: string;\n  postalCode?: string;\n  country?: string;\n  period?: Period;\n}\n","import {Element} from '../element';\nexport class Attachment extends Element {\n  resourceType: string = 'Attachment';\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n  contentType?: string;\n  language?: string;\n  data?: string; // base64Binary Regex: (\\s*([0-9a-zA-Z\\+\\=]){4}\\s*)+\n  url?: string; // url\n  size?: number; // unsignedInt Regex: [0]|([1-9][0-9]*)\n  hash?: string; // base64Binary Regex: (\\s*([0-9a-zA-Z\\+\\=]){4}\\s*)+\n  title?: string;\n  creation?: Date;\n\n  // constructor(contentType, language, data, url, size, hash, title, creation) {\n  //   super();\n  //   this.contentType = contentType;\n  //   this.language = language;\n  //   this.data = data;\n  //   this.url = url;\n  //   this.size = size;\n  //   this.hash = hash;\n  //   this.title = title;\n  //   this.creation = creation;\n  // }\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from '../terminology/identifier';\nimport {CodeableConcept} from '../terminology/codeableconcept';\nimport {Reference} from '../reference';\nimport {Quantity} from '../terminology/quantity';\nimport {Range} from '../range';\nimport {Period} from '../period';\n\nexport class Group extends DomainResource {\n    resourceType: string = 'Group';\n    identifier?: Identifier[];\n    active?: boolean;\n    type: 'person' | 'animal' | 'practitioner' | 'device' | 'medication' | 'substance';\n    actual: boolean;\n    code?: CodeableConcept;\n    name?: string;\n    quantity?: number; // unsignedInt  \tRegex: [0]|([1-9][0-9]*)\n    managingEntity?: Reference; // (Organization | RelatedPerson | Practitioner | PractitionerRole)\n    characteristic?: { // BackboneElement\n        code: CodeableConcept;\n        valueCodeableConcept?: CodeableConcept;\n        valueBoolean?: boolean;\n        valueQuantity?: Quantity;\n        valueRange?: Range;\n        valueReference?: Reference;\n        exclude: boolean;\n        period?: Period;\n    }[];\n    member?: { // BackboneElement\n        entity: Reference; // (Patient | Practitioner | PractitionerRole | Device | Medication | Substance | Group)\n        period?: Period;\n        inactive?: boolean;\n    }[];\n}\n","import { DomainResource } from '../domain-resource';\nimport { Identifier } from '..';\nimport { HumanName } from './humanname';\nimport { ContactPoint } from '..';\nimport { Address } from './address';\nimport { CodeableConcept } from '..';\nimport { Attachment } from './attachment';\nimport { Reference } from '../reference';\nimport { Period } from '../period';\n\nexport class Patient extends DomainResource {\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n  resourceType: string = 'Patient';\n  identifier?: Identifier[];\n  active?: boolean;\n  name?: HumanName[];\n  telecom?: ContactPoint[];\n  gender?: 'male' | 'female' | 'other' | 'unknown';\n  birthDate?: Date;\n  deceasedBoolean?: boolean;\n  deceasedDateTime?: Date;\n  address?: Address[];\n  maritalStatus?: CodeableConcept;\n  multipleBirthBoolean?: boolean;\n  multipleBirthInteger?: number; // Regex: [0]|[-+]?[1-9][0-9]*\n  photo?: Attachment[];\n  contact?: { // BackboneElement\n    relationship?: CodeableConcept[];\n    name?: HumanName;\n    telecom?: ContactPoint[];\n    address?: Address;\n    gender?: 'male' | 'female' | 'other' | 'unknown';\n    organization?: Reference; // (Organization)\n    period?: Period;\n  }[];\n  communication?: { // BackboneElement\n    language: CodeableConcept;\n    preferred?: boolean;\n  }[];\n  generalPractitioner?: Reference[]; // (Organization | Practitioner | PractitionerRole)\n  managingOrganization?: Reference; // (Organization)\n  link?: { // BackboneElement\n    other: Reference; // (Patient | RelatedPerson)\n    type: 'replaced-by' | 'replaces' | 'refer' | 'seealso';\n  }[];\n\n  public static getNew() {\n    return new Patient({name: [HumanName.getNew()]});\n  }\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from '../terminology/identifier';\nimport {HumanName} from './humanname';\nimport {ContactPoint} from '../terminology/contactpoint';\nimport {Address} from './address';\nimport {Attachment} from './attachment';\nimport {CodeableConcept} from '../terminology/codeableconcept';\nimport {Period} from '../period';\nimport {Reference} from '../reference';\n\nexport class Practitioner extends DomainResource {\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n  resourceType: string = 'Practitioner';\n  identifier?: Identifier[];\n  active?: boolean;\n  name?: HumanName[];\n  telecom?: ContactPoint[];\n  address?: Address[];\n  gender?: \t'male' | 'female' | 'other' | 'unknown';\n  birthDate?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n  photo?: Attachment[];\n  qualification?: { // BackboneElement\n    identifier?: Identifier[];\n    code: CodeableConcept;\n    period?: Period;\n    issuer?: Reference; // (Organization)\n  }[];\n  communication?: CodeableConcept[];\n\n  public static getNew() {\n    return new Practitioner({name: [HumanName.getNew()]});\n  }\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from '../terminology/identifier';\nimport {Period} from '../period';\nimport {Reference} from '../reference';\nimport {CodeableConcept} from '../terminology/codeableconcept';\nimport {ContactPoint} from '../terminology/contactpoint';\nimport {HumanName} from './humanname';\n\nexport class PractitionerRole extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    resourceType: string = 'PractitionerRole';\n    identifier?: Identifier[];\n    active?: boolean;\n    period?: Period;\n    practitioner?: Reference; // (Practitioner)\n    organization?: Reference; // (Organization)\n    code?: CodeableConcept[];\n    specialty?: CodeableConcept[];\n    location?: Reference[]; // (Location)\n    healthcareService?: Reference[]; // (HealthcareService)\n    telecom?: ContactPoint[];\n    availableTime?: {\n        daysOfWeek?: string[];\n        allDay?: boolean;\n        availableStartTime?: Date; // Regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\n        availableEndTime?: Date;\n    }[];\n    notAvailable?: { // BackboneElement\n        description: string;\n        during?: Period;\n    }[];\n    availabilityExceptions?: string;\n    endpoint?: Reference[]; // (Endpoint)\n\n    public static getNew() {\n        return new PractitionerRole({name: [HumanName.getNew()]});\n    }\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from '../terminology/identifier';\nimport {Reference} from '../reference';\nimport {CodeableConcept} from '../terminology/codeableconcept';\nimport {HumanName} from './humanname';\nimport {ContactPoint} from '../terminology/contactpoint';\nimport {Address} from './address';\nimport {Attachment} from './attachment';\nimport {Period} from '../period';\n\nexport class RelatedPerson extends DomainResource {\n    resourceType: string = 'RelatedPerson';\n    identifier?: Identifier[];\n    active?: boolean;\n    patient: Reference; // (Patient)\n    relationship?: CodeableConcept[];\n    name?: HumanName[];\n    telecom?: ContactPoint[];\n    gender?: 'male' | 'female' | 'other' | 'unknown';\n    birthDate?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n    address?: Address[];\n    photo?: Attachment[];\n    period?: Period;\n    communication?: { // BackboneElement\n        language: CodeableConcept;\n        preferred: boolean;\n    }[];\n}\n","import {Element} from '../element';\nimport {Extension} from '../extension';\n\nexport class BackboneElement extends Element {\n    modifierExtension?: Extension[];\n}\n","import {Coding} from './coding';\nimport {Element} from '../element';\n\nexport class CodeableConcept extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    coding?: Coding[];\n    text?: string; // Regex: [ \\r\\n\\t\\S]+\n}\n","import {Identifier} from './identifier';\nimport {ContactDetail} from './contactdetail';\nimport {UsageContext} from './usagecontext';\nimport {CodeableConcept} from './codeableconcept';\nimport {DomainResource} from '../domain-resource';\nimport {Coding} from './coding';\nimport {CodeSystemConcept} from './codesystemconcept';\n\nexport class CodeSystem extends DomainResource {\n    resourceType: string = 'CodeSystem';\n    url?: string; // uri\n    identifier?: Identifier[];\n    version?: string;\n    name?: string;\n    title?: string;\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    experimental?: boolean;\n    date?: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    description?: string; // Regex: \\s*(\\S|\\s)*\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    purpose?: string; // Regex: \\s*(\\S|\\s)*\n    copyright?: string; // Regex: \\s*(\\S|\\s)*\n    caseSensitive?: boolean;\n    valueSet?: string; // canonical(ValueSet)\n    hierarchyMeaning?: 'grouped-by' | 'is-a' | 'part-of' | 'classified-with';\n    compositional?: boolean;\n    versionNeeded?: boolean;\n    content: 'not-present' | 'example' | 'fragment' | 'complete' | 'supplement';\n    supplements?: string; // canonical(CodeSystem)\n    count?: number; // unsignedInt Regex: [0]|([1-9][0-9]*)\n    filter?: { // BackboneElement\n        code: string; // code\n        description?: string;\n        operator: string[]; // code\n        value: string;\n    }[];\n    property?: { // BackboneElement\n        code: string; // code\n        uri?: string; // uri\n        description?: string;\n        type: 'Coding' | 'string' | 'boolean' | 'Date' | 'number'; // code,(\tcode | Coding | string | integer | boolean | dateTime | decimal)\n    }[];\n    /*concept?: { // BackboneElement\n        code: string;\n        display?: string;\n        definition?: string;\n        designation?: { // BackboneElement\n            language?: string;\n            use?: Coding;\n            value: string;\n        }[];\n        property?: { // BackboneElement\n            code: string;\n            valueCode: string;\n            valueCoding: Coding;\n            valueString: string;\n            valueInteger: number; // integer\n            valueBoolean: boolean;\n            valueDateTime: Date;\n            valueDecimal: number; // decimal\n        }[];*/\n       concept?: CodeSystemConcept[];\n}\n","import {Coding} from './coding';\nimport {BackboneElement} from './backboneelement';\n\nexport class CodeSystemConcept extends BackboneElement {\n    code: string; // code\n    display?: string;\n    definition?: string;\n    designation?: { // BackboneElement\n        language?: string; // code\n        use?: Coding;\n        value: string;\n    }[];\n    property?: { // BackboneElement\n        code: string; // code\n        valueCode?: string;\n        valueCoding?: Coding;\n        valueString?: string;\n        valueInteger?: number;\n        valueBoolean?: boolean;\n        valueDateTime?: Date;\n        valueDecimal?: number;\n    }[];\n    concept?: CodeSystemConcept; // \tsee concept\tChild Concepts (is-a/contains/categorizes)\n}\n","import {Element} from '../element';\n\nexport class Coding extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    system?: string; // uri Regex: \\S*\n    version?: string; // Regex: [ \\r\\n\\t\\S]+\n    code?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n    display?: string; // Regex: [ \\r\\n\\t\\S]+\n    userSelected?: boolean; // Regex: true|false\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from './identifier';\nimport {ContactDetail} from './contactdetail';\nimport {UsageContext} from './usagecontext';\nimport {CodeableConcept} from './codeableconcept';\nimport {ConceptMapDependsOn} from './conceptmapdependson';\n\nexport class ConceptMap extends DomainResource {\n    resourceType: string = 'ConceptMap';\n    url?: string; // uri\n    identifier?: Identifier;\n    version?: string;\n    name?: string;\n    title?: string;\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    experimental?: boolean;\n    date?: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    description?: string;\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    purpose?: string; // Regex: \\s*(\\S|\\s)*\n    copyright?: string; // Regex: \\s*(\\S|\\s)*\n    sourceUri?: string; // uri\n    sourceCanonical?: string; // canonical(ValueSet)\n    targetUri?: string; // uri\n    targetCanonical?: string; // canonical(ValueSet)\n    group?: {\n        source?: string; // uri\n        sourceVersion?: string;\n        target?: string; // uri\n        targetVersion?: string;\n        element: {\n            code?: string;\n            display?: string;\n            target?: {\n                code?: string;\n                display?: string;\n                equivalence: string; // code\n                comment?: string;\n                dependsOn?: ConceptMapDependsOn[];\n                product?: ConceptMapDependsOn[]; // see dependsOn\n            }[];\n            unmapped?: {\n                mode: string; // code\n                code?: string; // code\n                display?: string;\n                url?: string; // canonical(ConceptMap)\n            }[]\n        }[];\n    }[];\n}\n","import {BackboneElement} from './backboneelement';\n\nexport class ConceptMapDependsOn extends BackboneElement {\n    property: string; // uri\n    system?: string; // canonical(CodeSystem)\n    value: string;\n    display?: string;\n}\n","import {ContactPoint} from './contactpoint';\nimport {Element} from '../element';\n\nexport class ContactDetail extends Element {\n\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    name?: string;\n    telecom?: ContactPoint[];\n}\n","import {Element} from '../element';\nimport {Period} from '../period';\n\nexport class ContactPoint extends Element {\n\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    system?: 'phone' | 'fax' | 'email' | 'pager' | 'url' | 'sms' | 'other'; // Regex: [^\\s]+(\\s[^\\s]+)*\n    value?: string;\n    use?: 'home' | 'work' | 'temp' | 'old' | 'mobile';\n    rank?: number; // positiveInt Regex: +?[1-9][0-9]*\n    period?: Period;\n}\n","import {CodeableConcept} from './codeableconcept';\nimport {Period} from '../period';\nimport {Reference} from '../reference';\nimport {Element} from '../element';\n\nexport class Identifier extends Element {\n\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    use?: string; // Regex: [^\\s]+(\\s[^\\s]+)* // usual | official | temp | secondary | old (If known)\n    type?: CodeableConcept;\n    system?: string; // uri Regex: \\S*\n    value?: string;\n    period?: Period;\n    assigner?: Reference;\n}\n","import {DomainResource} from '../domain-resource';\nimport {ContactDetail} from './contactdetail';\nimport {CodeableConcept} from './codeableconcept';\nimport {UsageContext} from './usagecontext';\nimport {Period} from '../period';\n\nexport class NamingSystem extends DomainResource {\n    resourceType: string = 'NamingSystem';\n    name: string;\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    kind: string; // code\n    date: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    responsible?: string;\n    type?: CodeableConcept;\n    description?: string;\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    usage?: string;\n    uniqueId: { // BackboneElement\n        type: 'oid' | 'uuid' | 'uri' | 'other';\n        value: string;\n        preferred?: boolean;\n        comment?: string;\n        period?: Period;\n    }[];\n}\n","import {Element} from '../element';\n\nexport class Quantity extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    value?: number; // decimal \tRegex: -?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    comparator?: '<' | '<=' | '>=' | '>';\n    unit?: string;\n    system?: string; // uri\n    code?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n}\n","import { Quantity } from './quantity';\n\nexport class SimpleQuantity extends Quantity {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    value?: number; // decimal \tRegex: (0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    unit?: string;\n    system?: string; // uri\n    code?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n}\n","import {DomainResource} from '../domain-resource';\nimport {ContactDetail} from './contactdetail';\nimport {UsageContext} from './usagecontext';\nimport {CodeableConcept} from './codeableconcept';\n\nexport class TerminologyCapabilities extends DomainResource {\n    resourceType: string = 'TerminologyCapabilities';\n    url?: string; // uri\n    version?: string;\n    name?: string;\n    title?: string;\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    experimental?: boolean;\n    date: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    description?: string;\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    purpose?: string; // Regex: \\s*(\\S|\\s)*\n    copyright?: string; // Regex: \\s*(\\S|\\s)*\n    kind: 'instance' | 'capability' | 'requirements';\n    software?: {\n        name: string;\n        version?: string;\n    };\n    implementation?: { // BackboneElement\n        description: string;\n        url?: string; // url\n    };\n    lockedDate?: boolean;\n    codeSystem?: { // BackboneElement\n        uri?: string; // \tcanonical(CodeSystem)\n        version?: { // BackboneElement\n            code?: string;\n            isDefault?: boolean;\n            compositional?: boolean;\n            language?: string[];\n            filter?: {\n                code: string; // code\n                op: string[];\n            }[];\n            property?: string[]; // code\n        }[];\n        subsumption?: boolean;\n    }[];\n    expansion?: {\n        hierarchical?: boolean;\n        paging?: boolean;\n        incomplete?: boolean;\n        parameter?: {\n            name: string;\n            documentation?: string;\n        }[];\n        textFilter?: string;\n    };\n    codeSearch?: 'explicit' | 'all'; // code\n    validateCode?: { // BackboneElement\n        translations: boolean;\n    };\n    translation?: { // BackboneElement\n        needsMap: boolean;\n    };\n    closure?: { // BackboneElement\n        translation?: boolean;\n    };\n}\n","import {Coding} from './coding';\nimport {Element} from '../element';\nimport {CodeableConcept} from './codeableconcept';\nimport {Reference} from '../reference';\nimport {Quantity} from './quantity';\nimport {Range} from '../range';\n\nexport class UsageContext extends Element {\n    code: Coding;\n    valueCodeableConcept?: CodeableConcept;\n    valueQuantity?: Quantity;\n    valueRange?: Range;\n    valueReference?: Reference;\n    // ('PlanDefinition' | 'ResearchStudy' | 'InsurancePlan' | 'HealthcareService' | 'Group' | 'Location' | 'Organization')\n}\n","import {DomainResource} from '../domain-resource';\nimport {Identifier} from './identifier';\nimport {ContactDetail} from './contactdetail';\nimport {UsageContext} from './usagecontext';\nimport {CodeableConcept} from './codeableconcept';\nimport {Coding} from './coding';\nimport {ValueSetContains} from '../valuesetcontains';\n\nexport class ValueSet extends DomainResource {\n    resourceType: string = 'ValueSet';\n    url?: string; // uri\n    identifier?: Identifier[];\n    version?: string;\n    name?: string;\n    title?: string;\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    experimental?: boolean;\n    date?: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    description?: string;\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    immutable?: boolean;\n    purpose?: string; // Regex: \\s*(\\S|\\s)*\n    copyright?: string; // Regex: \\s*(\\S|\\s)*\n    compose?: { // BackboneElement\n        lockedDate?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n        inactive?: boolean;\n        include: { // BackboneElement\n            system?: string; // uri\n            version?: string;\n            concept?: {\n                code: string; // code\n                display?: string;\n                designation?: { // BackboneElement\n                    language?: string; // code\n                    use?: Coding;\n                    value: string;\n                }[]\n            }[];\n            filter?: { // BackboneElement\n                property: string; // code\n                op: string; // = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists\n                value: string;\n            }[];\n            valueSet?: string[]; // canonical(ValueSet)\n        }[];\n        exclude?: { // BackboneElement\n            system?: string; // uri\n            version?: string;\n            concept?: {\n                code: string; // code\n                display?: string;\n                designation?: { // BackboneElement\n                    language?: string; // code\n                    use?: Coding;\n                    value: string;\n                }[]\n            }[];\n            filter?: { // BackboneElement\n                property: string; // code\n                op: string; // = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists\n                value: string;\n            }[];\n            valueSet?: string[]; // canonical(ValueSet)\n        }[]; // see include\tExplicitly exclude codes from a code system or other value sets\n    };\n    expansion?: { // BackboneElement\n        identifier?: string; // uri\n        timestamp: Date;\n        total?: number; // Regex: [0]|[-+]?[1-9][0-9]*\n        offset?: number; // Regex: [0]|[-+]?[1-9][0-9]*\n        parameter?: {\n            name: string;\n            valueString?: string;\n            valueBoolean?: boolean;\n            valueInteger?: number;\n            valueDecimal?: number;\n            valueUri?: string;\n            valueCode?: string;\n            valueDateTime?: Date;\n        }[]; // BackboneElement\n        contains?: ValueSetContains[];\n    };\n}\n","export class ResourceCapability {\n    resourceType: string = 'ResourceCapability';\n    type: string;\n    profile?: string;\n    interaction: {\n        code: 'read' | 'vread' | 'update' | 'patch' | 'delete' | 'history-instance' | 'history-type' | 'create' | 'search-type'\n        documentation?: string;\n    }[];\n    versioning?: string;\n    conditionalRead?: 'not-supported' | 'modified-since' | 'not-match' | 'full-support';\n    conditionalCreate?: boolean;\n    conditionalUpdate?: boolean;\n    conditionalDelete?: 'not-supported' | 'single' | 'multiple';\n    searchInclude?: string[];\n    searchParam?: {\n        name: string;\n        definition?: string;\n        type: 'number' | 'date' | 'string' | 'token' | 'reference' | 'composite' | 'quantity' | 'uri' | 'special';\n        documentation?: string;\n    }[];\n    operation?: {\n        name: string;\n        definition?: string;\n        documentation?: string;\n    }[];\n}\n\nexport class CapabilityStatement {\n    resourceType: 'CapabilityStatement';\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    date: Date;\n    publisher?: string;\n    kind: 'instance' | 'capability' | 'requirements';\n    software?: {\n        name: string;\n        version: string;\n    };\n    implementation?: {\n        description: string,\n        url: string;\n    };\n    fhirVersion: string;\n    format: string[];\n    rest?: {\n        mode: 'client' | 'server';\n        resource: ResourceCapability[];\n    }[];\n}\n","import { Resource } from '../resource';\nimport { Identifier } from '../terminology/identifier';\nimport {BundleEntry} from './bundle-entry';\n\nexport class Bundle extends Resource {\n    identifier?: Identifier;\n    resourceType: string = 'Bundle';\n    type: 'document' | 'message' | 'transaction' | 'transaction-response' | 'batch' | 'batch-response' | 'history' | 'searchset' | 'collection';\n    timestamp?: Date;\n    total: number;\n    link?: {relation: string, url: string}[];\n    entry?: BundleEntry[];\n}\n","import {Resource} from '../resource';\n\nexport class BundleEntry {\n    link?: string;\n    fullUrl?: string;\n    resource?: Resource;\n    request?: {\n        method?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n        url: string;\n        ifNoneMatch?: string;\n        ifModifiedSince?: Date;\n        ifMatch?: string;\n        ifNoneExist?: string;\n    };\n    response?: {\n        status: string;\n        location?: string;\n        etag?: string;\n        lastModified?: Date;\n        outcome?: Resource;\n    };\n    search?: {\n        mode?: 'match' | 'include' | 'outcome';\n        score?: number;\n    };\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Coding, Identifier, Period, Reference} from '..';\nimport {Duration} from '../medications/duration';\n\nexport class Encounter extends DomainResource {\n  resourceType: string = 'Encounter';\n  identifier?: Identifier[];\n  status: 'planned' | 'arrived' | 'triaged' | 'in-progress' | 'onleave' | 'finished' | 'cancelled';\n  statusHistory?: { // BackboneElement\n    status: 'planned' | 'arrived' | 'triaged' | 'in-progress' | 'onleave' | 'finished' | 'cancelled';\n    period: Period\n  }[];\n  class: Coding;\n  classHistory?: { // BackboneElement\n    class: Coding;\n    period: Period\n  }[];\n  type?: CodeableConcept[];\n  serviceType?: CodeableConcept;\n  priority?: CodeableConcept;\n  subject?: Reference; // (Patient | Group)\n  episodeOfCare?: Reference[]; // (EpisodeOfCare)\n  basedOn?: Reference[]; // (ServiceRequest)\n  participant?: { // BackboneElement\n    type?: CodeableConcept[];\n    period?: Period;\n    individual?: Reference; // (Practitioner | PractitionerRole | RelatedPerson)\n  }[];\n  appointment?: Reference[]; // (Appointment)\n  period?: Period;\n  length?: Duration;\n  reasonCode?: CodeableConcept[];\n  reasonReference?: Reference[]; // (Condition | Procedure | Observation | ImmunizationRecommendation)\n  diagnosis?: { // BackboneElement\n    condition: Reference; // (Condition | Procedure)\n    use?: CodeableConcept;\n    rank?: number; // positiveInt Regex: +?[1-9][0-9]*\n  }[];\n  account?: Reference[];\n  hospitalization?: { // BackboneElement\n    preAdmissionIdentifier?: Identifier;\n    origin?: Reference; // (Location | Organization)\n    admitSource?: CodeableConcept;\n    reAdmission?: CodeableConcept;\n    dietPreference?: CodeableConcept[];\n    specialCourtesy?: CodeableConcept[];\n    specialArrangement?: CodeableConcept[];\n    destination?: Reference; // (Location | Organization)\n    dischargeDisposition?: CodeableConcept;\n  };\n  location?: { // BackboneElement\n    location: Reference; // (Location)\n    status?: 'planned' | 'active' | 'reserved' | 'completed';\n    physicalType?: CodeableConcept;\n    period?: Period;\n  }[];\n  serviceProvider?: Reference; // (Organization)\n  partOf?: Reference; // (Encounter)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\n\nexport class EpisodeOfCare extends DomainResource {\n    resourceType: string = 'EpisodeOfCare';\n    identifier?: Identifier[];\n    status: 'planned' | 'waitlist' | 'active' | 'onhold' | 'finished' | 'cancelled' | 'entered-in-error';\n    statusHistory?: { // BackboneElement\n        status: 'planned' | 'waitlist' | 'active' | 'onhold' | 'finished' | 'cancelled' | 'entered-in-error';\n        period: Period;\n    }[];\n    type?: CodeableConcept[];\n    diagnosis?: { // BackboneElement\n        condition: Reference; // (Condition)\n        role?: CodeableConcept;\n        rank?: number; // positiveInt Regex: +?[1-9][0-9]*\n    }[];\n    patient: Reference; // (Patient)\n    managingOrganization?: Reference; // (Organization)\n    period?: Period;\n    referralRequest?: Reference[]; // (ServiceRequest)\n    careManager?: Reference; // (Practitioner | PractitionerRole)\n    team?: Reference[]; // (CareTeam)\n    account?: Reference[]; // (Account)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\n\nexport class Flag extends DomainResource {\n    resourceType: string = 'Flag';\n    identifier?: Identifier[];\n    status: 'active' | 'inactive' | 'entered-in-error';\n    category?: CodeableConcept[];\n    code: CodeableConcept;\n    subject: Reference; // (Patient | Location | Group | Organization | Practitioner | PlanDefinition | Medication | Procedure)\n    period?: Period;\n    encounter?: Reference; // (Encounter)\n    author?: Reference; // (Device | Organization | Patient | Practitioner | PractitionerRole)\n}\n","import {DomainResource} from '../domain-resource';\nimport {Attachment, CodeableConcept, ContactDetail, Identifier, Period, Reference, UsageContext} from '..';\nimport {RelatedArtifact} from '../relatedartifact';\nimport {ParameterDefinition} from '../parameterdefinition';\nimport {DataRequirement} from '../datarequirement';\n\nexport class Library  extends DomainResource {\n  resourceType: string = 'Library';\n  url?: string; // uri\n  identifier?: Identifier[];\n  version?: string;\n  name?: string;\n  title?: string;\n  subtitle?: string;\n  status: 'draft' | 'active' | 'retired' | 'unknown';\n  experimental?: boolean;\n  type: CodeableConcept;\n  subjectCodeableConcept?: CodeableConcept;\n  subjectReference?: Reference;\n  date?: Date;\n  publisher?: string;\n  contact?: ContactDetail[];\n  description?: string;\n  useContext?: UsageContext[];\n  jurisdiction?: CodeableConcept[];\n  purpose?: string;\n  usage?: string;\n  copyright?: string;\n  approvalDate?: Date;\n  lastReviewDate?: Date;\n  effectivePeriod?: Period;\n  topic?: CodeableConcept[];\n  author?: ContactDetail[];\n  editor?: ContactDetail[];\n  reviewer?: ContactDetail[];\n  endorser?: ContactDetail[];\n  relatedArtifact?: RelatedArtifact[];\n  parameter?: ParameterDefinition[];\n  dataRequirement?: DataRequirement[];\n  content?: Attachment[];\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Reference} from '..';\nimport {Annotation} from '../workflow/annotation';\n\nexport class List extends DomainResource {\n    resourceType: string = 'List';\n    identifier?: Identifier[];\n    status: 'current' | 'retired' | 'entered-in-error';\n    mode: 'working' | 'snapshot' | 'changes';\n    title?: string;\n    code?: CodeableConcept;\n    subject?: Reference; // (Patient | Group | Device | Location)\n    encounter?: Reference; // (Encounter)\n    date?: Date;\n    source?: Reference; // (Practitioner | PractitionerRole | Patient | Device)\n    orderedBy?: CodeableConcept;\n    note?: Annotation[];\n    entry?: { // BackboneElement\n        flag?: CodeableConcept;\n        deleted?: boolean;\n        date?: Date;\n        item: Reference; // (Any)\n    }[];\n    emptyReason?: CodeableConcept;\n}\n","import {Timing} from '../timing';\nimport {Ratio} from '../ratio';\nimport { BackboneElement } from '../terminology/backboneelement';\nimport { CodeableConcept } from '../terminology/codeableconcept';\nimport { SimpleQuantity } from '../terminology/simple-quantity';\n\nexport class Dosage extends BackboneElement {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    sequence?: number;\n    text?: string;\n    additionalInstruction?: CodeableConcept[];\n    patientInstruction?: string;\n    timing?: Timing;\n    asNeededBoolean?: boolean;\n    asNeededCodeableConcept?: CodeableConcept;\n    site?: CodeableConcept;\n    route?: CodeableConcept;\n    method?: CodeableConcept;\n    doseAndRate?: {\n        type?: CodeableConcept;\n        doseRange?: Range;\n        doseQuantity?: SimpleQuantity;\n        rateRatio?: Ratio;\n        rateRange?: Range;\n        rateQuantity?: SimpleQuantity;\n    }[];\n    maxDosePerPeriod?: Ratio;\n    maxDosePerAdministration?: SimpleQuantity;\n    maxDosePerLifetime?: SimpleQuantity;\n}\n","import { Quantity } from '../terminology/quantity';\n\nexport class Duration extends Quantity {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    value?: number; // decimal \tRegex: -?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    comparator?: '<' | '<=' | '>=' | '>';\n    unit?: string;\n    system?: string; // uri\n    code?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\nimport {Annotation} from '../workflow/annotation';\nimport {SimpleQuantity} from '../terminology/simple-quantity';\nimport {Ratio} from '../ratio';\n\nexport class MedicationAdministration extends DomainResource {\n    resourceType: string = 'MedicationAdministration';\n    identifier?: Identifier[];\n    instantiates?: string[]; // uri\n    partOf?: Reference[]; // (MedicationAdministration | Procedure)\n    status: 'in-progress' | 'not-done' | 'on-hold' | 'completed' | 'entered-in-error' | 'stopped' | 'unknown';\n    statusReason?: CodeableConcept[];\n    category?: CodeableConcept;\n    medicationCodeableConcept: CodeableConcept;\n    medicationReference: Reference; // (Medication)\n    subject: Reference; // (Patient | Group)\n    context?: Reference; // (Encounter | EpisodeOfCare)\n    supportingInformation?: Reference[]; // (Any)\n    effectiveDateTime: Date;\n    effectivePeriod: Period;\n    performer?: { // BackboneElement\n        function?: CodeableConcept;\n        actor: Reference; // (Practitioner | PractitionerRole | Patient | RelatedPerson | Device)\n    }[];\n    reasonCode?: CodeableConcept[];\n    reasonReference?: Reference[]; // (Condition | Observation | DiagnosticReport)\n    request?: Reference; // (MedicationRequest)\n    device?: Reference[]; // (Device)\n    note?: Annotation[];\n    dosage?: {\n        text?: string;\n        site?: CodeableConcept;\n        route?: CodeableConcept;\n        method?: CodeableConcept;\n        dose?: SimpleQuantity;\n        rateRatio?: Ratio;\n        rateQuantity?: SimpleQuantity;\n    };\n    eventHistory?: Reference[]; // (Provenance)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Reference} from '..';\nimport {SimpleQuantity} from '../terminology/simple-quantity';\nimport {Annotation} from '../workflow/annotation';\nimport {Dosage} from './dosage';\n\nexport class MedicationDispense extends DomainResource {\n    resourceType: string = 'MedicationDispense';\n    identifier?: Identifier[];\n    partOf?: Reference; // (Procedure)\n    status: 'preparation' | 'in-progress' | 'cancelled' | 'on-hold' | 'completed' | 'entered-in-error' | 'stopped' | 'unknown';\n    statusReasonCodeableConcept?: CodeableConcept;\n    statusReasonReference?: Reference; // (DetectedIssue)\n    category?: CodeableConcept;\n    medicationCodeableConcept: CodeableConcept;\n    medicationReference: Reference; // (Medication)\n    subject?: Reference; // (Patient | Group)\n    context?: Reference; // (Encounter | EpisodeOfCare)\n    supportingInformation?: Reference[]; // (Any)\n    performer?: {\n        function?: CodeableConcept;\n        actor: Reference; // (Practitioner | PractitionerRole | Organization | Patient | Device | RelatedPerson)\n    }[];\n    location?: Reference; // (Location)\n    authorizingPrescription?: Reference[]; // (MedicationRequest)\n    type?: CodeableConcept;\n    quantity?: SimpleQuantity;\n    daysSupply?: SimpleQuantity;\n    whenPrepared?: Date;\n    whenHandedOver?: Date;\n    destination?: Reference; // (Location)\n    receiver?: Reference[]; // (Patient | Practitioner)\n    note?: Annotation[];\n    dosageInstruction?: Dosage[];\n    substitution?: {\n        wasSubstituted: boolean;\n        type?: CodeableConcept;\n        reason?: CodeableConcept[];\n        responsibleParty?: Reference[]; // (Practitioner | PractitionerRole)\n    };\n    detectedIssue?: Reference[]; // (DetectedIssue)\n    eventHistory?: Reference[]; // (Provenance)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Reference} from '..';\nimport {SimpleQuantity} from '../terminology/simple-quantity';\nimport {Ratio} from '../ratio';\nimport {Money} from '../money';\nimport {Dosage} from './dosage';\nimport {Duration} from './duration';\n\nexport class MedicationKnowledge extends DomainResource {\n    resourceType: string = 'MedicationKnowledge';\n    code?: CodeableConcept;\n    status?: 'active' | 'inactive' | 'entered-in-error';\n    manufacturer?: Reference; // (Organization)\n    doseForm?: CodeableConcept;\n    amount?: SimpleQuantity;\n    synonym?: string[];\n    relatedMedicationKnowledge?: { // BackboneElement\n        type: CodeableConcept;\n        reference?: Reference; // (MedicationKnowledge)\n    }[];\n    associatedMedication?: Reference; // (Medication)\n    productType?: CodeableConcept;\n    monograph?: { // BackboneElement\n        type?: CodeableConcept;\n        source?: Reference; // (DocumentReference | Media)\n    }[];\n    ingredient?: { // BackboneElement\n        itemCodeableConcept: CodeableConcept;\n        itemReference: Reference; // (Substance)\n        isActive?: boolean;\n        strength?: Ratio;\n    }[];\n    preparationInstruction?: string;\n    intendedRoute?: CodeableConcept[];\n    cost?: { // BackboneElement\n        type: CodeableConcept;\n        source?: string;\n        cost: Money;\n    }[];\n    monitoringProgram?: { // BackboneElement\n        type?: CodeableConcept;\n        name?: string;\n    }[];\n    administrationGuidelines?: { // BackboneElement\n        dosage?: { // BackboneElement\n            type: CodeableConcept;\n            dosage: Dosage[];\n            indicationCodeableConcept?: CodeableConcept;\n            indicationReference?: Reference; // (ObservationDefinition)\n            patientCharacteristics?: { // BackboneElement\n                characteristicCodeableConcept: CodeableConcept;\n                characteristicQuantity: SimpleQuantity;\n                value?: string;\n            }[];\n        }[];\n    }[];\n    medicineClassification?: { // BackboneElement\n        type: CodeableConcept;\n        classification?: CodeableConcept;\n    }[];\n    packaging?: { // BackboneElement\n        type?: CodeableConcept;\n        quantity?: SimpleQuantity;\n    }[];\n    drugCharacteristic?: { // BackboneElement\n        type?: CodeableConcept;\n        valueCodeableConcept?: CodeableConcept;\n        valueString?: string;\n        valueQuantity?: SimpleQuantity;\n        valueBase64Binary?: string; // Regex: (\\s*([0-9a-zA-Z\\+\\=]){4}\\s*)+\n    }[];\n    contraindication?: Reference[]; // (DetectedIssue)\n    regulatory?: { // BackboneElement\n        regulatoryAuthority: Reference; // (Organization)\n        substitution?: {\n            type: CodeableConcept;\n            allowed: boolean;\n        }[];\n        schedule?: { // BackboneElement\n            schedule: CodeableConcept;\n        }[];\n        maxDispense?: { // BackboneElement\n            quantity: SimpleQuantity;\n            period?: Duration;\n        }[];\n    }[];\n    kinetics?: { // BackboneElement\n        areaUnderCurve?: SimpleQuantity;\n        lethalDose50?: SimpleQuantity;\n        halfLifePeriod?: Duration;\n    }[];\n}\n","import { DomainResource } from '../domain-resource';\nimport { CodeableConcept, Identifier, Period, Reference } from '..';\nimport { Annotation } from '../workflow/annotation';\nimport { Dosage } from './dosage';\nimport { SimpleQuantity } from '..';\nimport { Duration } from './duration';\n\nexport class MedicationRequest extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    readonly resourceType: string = 'MedicationRequest';\n    identifier?: Identifier[];\n    status: 'active' | 'on-hold' | 'cancelled' | 'completed' | 'entered-in-error' | 'stopped' | 'draft' | 'unknown';\n    statusReason?: CodeableConcept;\n    intent: 'proposal' | 'plan' | 'order' | 'original-order' | 'instance-order' | 'option';\n    category?: CodeableConcept[];\n    priority?: 'routine' | 'urgent' | 'asap' | 'stat';\n    doNotPerform?: boolean;\n    reportedBoolean?: boolean;\n    reportedReference?: Reference; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Organization)\n    medicationCodeableConcept?: CodeableConcept;\n    medicationReference?: Reference; // (Medication)\n    subject: Reference; // (Patient | Group)\n    encounter?: Reference; // (Encounter)\n    supportingInformation?: Reference; // (Any)\n    authoredOn?: Date; //\n    requester?: Reference; // (Practitioner | PractitionerRole | Organization | Patient | RelatedPerson | Device)\n    performer?: Reference; // (Practitioner | PractitionerRole | Organization | Patient | Device | RelatedPerson | CareTeam)\n    performerType?: CodeableConcept;\n    recorder?: Reference; // (Practitioner | PractitionerRole)\n    reasonCode?: CodeableConcept[];\n    reasonReference?: Reference; // (Condition | Observation)\n    instantiatesCanonical?: string[]; // Instantiates FHIR protocol or definition\n    instantiatesUri?: string[]; // uri\n    basedOn?: Reference; // (CarePlan | MedicationRequest | ServiceRequest | ImmunizationRecommendation)\n    groupIdentifier?: Identifier;\n    courseOfTherapyType?: CodeableConcept;\n    insurance?: Reference; // (Coverage | ClaimResponse)\n    note?: Annotation[];\n    dosageInstruction?: Dosage[];\n    dispenseRequest?: { // BackboneElement\n        initialFill?: { // BackboneElement\n            quantity?: SimpleQuantity;\n            duration?: Duration; // First fill duration\n        };\n        dispenseInterval?: Duration; // Minimum period of time between dispenses\n        validityPeriod?: Period;\n        numberOfRepeatsAllowed?: number;\n        quantity?: SimpleQuantity;\n        expectedSupplyDuration?: Duration;\n        performer?: Reference;\n    };\n    substitution?: { // BackboneElement\n        allowedBoolean: boolean;\n        allowedCodeableConcept: CodeableConcept;\n        reason?: CodeableConcept;\n    };\n    priorPrescription?: Reference; // (MedicationRequest)\n    detectedIssue?: Reference[]; // (DetectedIssue)\n    eventHistory?: Reference[]; // (Provenance)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\nimport {Annotation} from '../workflow/annotation';\nimport {Dosage} from './dosage';\n\nexport class MedicationStatement extends DomainResource {\n    resourceType: string = 'MedicationStatement';\n    identifier?: Identifier[];\n    basedOn?: Reference[]; // (MedicationRequest | CarePlan | ServiceRequest)\n    partOf?: Reference[]; // (MedicationAdministration | MedicationDispense | MedicationStatement | Procedure | Observation)\n    status: 'active' | 'completed' | 'entered-in-error' | 'intended' | 'stopped' | 'on-hold' | 'unknown' | 'not-taken';\n    statusReason?: CodeableConcept[];\n    category?: CodeableConcept;\n    medicationCodeableConcept: CodeableConcept;\n    medicationReference: Reference; // (Medication)\n    subject: Reference; // (Patient | Group)\n    context?: Reference; // (Encounter | EpisodeOfCare)\n    effectiveDateTime: Date;\n    effectivePeriod?: Period;\n    dateAsserted?: Date;\n    informationSource?: Reference; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Organization)\n    derivedFrom?: Reference[]; // (Any)\n    reasonCode?: CodeableConcept[];\n    reasonReference?: Reference[]; // (Condition | Observation | DiagnosticReport)\n    note?: Annotation[];\n    dosage?: Dosage[];\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Reference} from '..';\nimport {Ratio} from '../ratio';\n\nexport class Medication extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    resourceType: string = 'Medication';\n    identifier?: Identifier[];\n    code?: CodeableConcept;\n    status?: 'active' | 'inactive' | 'entered-in-error';\n    manufacturer?: Reference; // (Organization)\n    form?: CodeableConcept;\n    amount?: Ratio;\n    ingredient?: {\n        itemCodeableConcept: CodeableConcept;\n        itemReference: Reference; // (Substance | Medication)\n        isActive?: boolean;\n        strength?: Ratio;\n    }[];\n    batch?: {   // BackboneElement\n        lotNumber?: string;\n        expirationDate?: Date;\n    };\n}\n","import {Element} from './element';\n\nexport class Money extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    value?: number; // decimal\n    currency?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Coding, ContactPoint, Identifier, Period, Reference} from '..';\n\nexport class Endpoint extends DomainResource {\n  resourceType: string = 'Endpoint';\n  identifier?: Identifier[];\n  status: 'active' | 'suspended' | 'error' | 'off' | 'entered-in-error' | 'test';\n  connectionType: Coding;\n  name?: string;\n  managingOrganization?: Reference; // (Organization)\n  contact?: ContactPoint[];\n  period?: Period;\n  payloadType: CodeableConcept[];\n  payloadMimeType?: string; // Regex: [^\\s]+(\\s[^\\s]+)*\n  address: string; // url\n  header?: string[];\n}\n","import { DomainResource } from '../domain-resource';\nimport { Identifier } from '../terminology/identifier';\nimport { Reference } from '../reference';\nimport { CodeableConcept } from '../terminology/codeableconcept';\nimport { Attachment } from '../individuals/attachment';\nimport { ContactPoint } from '../terminology/contactpoint';\nimport { Period } from '../period';\n\nexport class HealthcareService extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    resourceType: string = 'HealthcareService';\n    identifier?: Identifier[];\n    active?: boolean;\n    providedBy?: Reference; // (Organization)\n    category?: CodeableConcept[];\n    type?: CodeableConcept[];\n    specialty?: CodeableConcept[];\n    location?: Reference[]; // (Location)\n    name?: string;\n    comment?: string;\n    extraDetails?: string; // Regex: \\s*(\\S|\\s)*\n    photo?: Attachment;\n    telecom?: ContactPoint[];\n    coverageArea?: Reference; // (Location)\n    serviceProvisionCode?: CodeableConcept[];\n    eligibility?: { // BackboneElement\n        code?: CodeableConcept;\n        comment?: string;\n    }[];\n    program?: CodeableConcept[];\n    characteristic?: CodeableConcept[];\n    communication?: CodeableConcept[];\n    referralMethod?: CodeableConcept[];\n    appointmentRequired?: boolean;\n    availableTime?: {\n        daysOfWeek?: string[];\n        allDay?: boolean;\n        availableStartTime?: Date; // Regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\n        availableEndTime?: Date;\n    }[];\n    notAvailable?: { // BackboneElement\n        description: string;\n        during?: Period;\n    }[];\n    availabilityExceptions?: string;\n    endpoint?: Reference[]; // (Endpoint)\n\n    public static getNew() {\n        return new HealthcareService({name: [HealthcareService.getNew()]});\n    }\n}\n","import {DomainResource} from '../domain-resource';\nimport {Address, CodeableConcept, Coding, ContactPoint, Identifier, Reference} from '..';\n\nexport class Location extends DomainResource {\n  resourceType: string = 'Location';\n  identifier?: Identifier[];\n  status?: 'active' | 'suspended' | 'inactive';\n  operationalStatus?: Coding;\n  name?: string;\n  alias?: string[];\n  description?: string;\n  mode?: 'instance' | 'kind';\n  type?: CodeableConcept[];\n  telecom?: ContactPoint;\n  address?: Address;\n  physicalType?: CodeableConcept;\n  position?: {\n    longitude: number; // decimal\tRegex: -?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    latitude: number;\n    altitude?: number;\n  }[];\n  managingOrganization?: Reference; // (Organization)\n  partOf?: Reference; // (Location)\n  hoursOfOperation?: {\n    daysOfWeek?: string[];\n    allDay?: boolean;\n    openingTime?: Date; // Regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\n    closingTime?: Date;\n  }[];\n  availabilityExceptions?: string;\n  endpoint?: Reference; // (Endpoint)\n}\n","import {DomainResource} from '../domain-resource';\nimport {Address, CodeableConcept, ContactPoint, HumanName, Identifier, Reference} from '..';\n\nexport class Organization extends DomainResource {\n  resourceType: string = 'Organization';\n  identifier?: Identifier[];\n  active?: boolean;\n  type?: CodeableConcept[];\n  name?: string;\n  alias?: string[];\n  telecom?: ContactPoint[];\n  address?: Address[];\n  partOf?: Reference; // (Organization)\n  contact?: { // BackboneElement\n    purpose?: CodeableConcept;\n    name?: HumanName;\n    telecom?: ContactPoint[];\n    address?: Address;\n  }[];\n  endpoint?: Reference; // (Endpoint)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, ContactPoint, Identifier, Period, Reference} from '..';\n\nexport class OrganizationAffiliation extends DomainResource {\n  resourceType: string = 'OrganizationAffiliation';\n  identifier?: Identifier[];\n  active?: boolean;\n  period?: Period;\n  organization?: Reference; // (Organization)\n  participatingOrganization \t?: Reference; // (Organization)\n  network?: Reference[]; // (Organization)\n  code?: CodeableConcept[];\n  specialty?: CodeableConcept[];\n  location?: Reference; // (Location)\n  healthcareService?: Reference; // (HealthcareService)\n  telecom?: ContactPoint[];\n  endpoint?: Reference; // (Endpoint)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier} from '../terminology';\nimport {Reference} from '../reference';\nimport {Period} from '../period';\n\nexport class Account extends DomainResource {\n    identifier?: Identifier[];\n    status: 'active ' | 'inactive' | 'entered-in-error' | 'on-hold' | 'unknown';\n    type?: CodeableConcept;\n    name?: string;\n    subject?: Reference[]; // (Patient | Device | Practitioner | PractitionerRole | Location | HealthcareService | Organization)\n    servicePeriod?: Period;\n    coverage?: { // BackboneElement\n        coverage: Reference; // (Coverage)\n        priority: string;\n    }[];\n    owner?: Reference; // (Organization)\n    description?: string;\n    guarantor?: { // BackboneElement\n        party: Reference; // (Patient, RelatedPerson, Organization)\n        onHold?: boolean;\n        period?: Period;\n    }[];\n    partOf?: Reference; // Account\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, SimpleQuantity} from '../terminology';\nimport {Reference} from '../reference';\nimport {Period} from '../period';\nimport {Money} from '../money';\n\nexport class Coverage extends DomainResource {\n  identifier?: Identifier[];\n  status: 'active' | 'cancelled' | 'draft' | 'entered-in-error';\n  type?: CodeableConcept;\n  policyHolder?: Reference; // (Patient, RelatedPerson, Organization)\n  subscriber?: Reference; // (Patient, RelatedPerson)\n  subscriberId?: string;\n  beneficiary: Reference; // (Patient)\n  dependent?: string;\n  relationship?: CodeableConcept;\n  period?: Period;\n  payor: Reference[]; // (Organization | Patient | RelatedPerson)\n  class?: {\n    type: CodeableConcept;\n    value: string;\n    name?: string;\n  }[];\n  order?: string;\n  network?: string;\n  costToBeneficiary?: { // BackboneElement\n    type?: CodeableConcept;\n    valueQuantity: SimpleQuantity;\n    valueMoney: Money;\n    exception?: { // BackboneElement\n      type: CodeableConcept;\n      period?: Period;\n    }[];\n  }[];\n  subrogation?: boolean;\n  contract?: Reference[]; // (Contract)\n}\n","import {DomainResource} from '../domain-resource';\nimport {Attachment, CodeableConcept, Coding, Identifier, Money, Period, Quantity, Reference, SimpleQuantity} from '..';\nimport {Timing} from '../timing';\nimport {Annotation} from '../workflow';\nimport {Signature} from '../signature';\n\nexport class Contract extends DomainResource {\n\n    resourceType: string = 'Contract';\n    identifier?: Identifier[];\n    url?: string; // uri\n    version?: string;\n    status?: 'amended' | 'appended' | 'cancelled' | 'disputed' | 'entered-in-error' |\n        'executable' | 'executed' | 'negotiable' | 'offered' | 'policy' | 'rejected' | 'renewed' | 'revoked' | 'resolved' | 'terminated';\n    legalState?: CodeableConcept;\n    instantiatesCanonical?: Reference; // (Contract)\n    instantiatesUri?: string; // uri\n    contentDerivative?: CodeableConcept;\n    issued?: Date;\n    applies?: Period;\n    expirationType?: CodeableConcept;\n    subject?: Reference[]; // (Any)\n    authority?: Reference[]; // (Organization)\n    domain?: Location[]; // (Location)\n    site?: Location[]; // (Location)\n    name?: string;\n    title?: string;\n    subtitle?: string;\n    alias?: string[];\n    author?: Reference; // (Patient | Practitioner | PractitionerRole | Organization)\n    scope?: CodeableConcept;\n    topicCodeableConcept?: CodeableConcept;\n    topicReference?: Reference; // (Any)\n    type?: CodeableConcept;\n    subType?: CodeableConcept[];\n    contentDefinition?: { // BackboneElement\n        type: CodeableConcept;\n        subType?: CodeableConcept;\n        publisher?: Reference;\n        publicationDate?: Date;\n        publicationStatus: 'amended' | 'appended' | 'cancelled' | 'disputed' | 'entered-in-error' |\n            'executable' | 'executed' | 'negotiable' | 'offered' | 'policy' | 'rejected' | 'renewed' | 'revoked' | 'resolved' | 'terminated';\n        copyright?: string; // markdown\n    };\n    term?: { // BackboneElement\n        identifier?: Identifier;\n        issued?: Date;\n        applies?: Period;\n        topicCodeableConcept?: CodeableConcept;\n        topicReference?: Reference; // (Any)\n        type?: CodeableConcept;\n        subType?: CodeableConcept;\n        text?: string;\n        securityLabel?: { // BackboneElement\n            number?: number[];\n            classification: Coding;\n            category?: Coding;\n            control?: Coding[];\n        }[];\n        offer: { // BackboneElement\n            identifier?: Identifier[];\n            party?: { // BackboneElement\n                reference: Reference[]; // (Patient | RelatedPerson | Practitioner | PractitionerRole | Device | Group | Organization)\n                role: CodeableConcept;\n            }[];\n            topic?: Reference; // (Any)\n            type?: CodeableConcept;\n            decision?: CodeableConcept;\n            decisionMode?: CodeableConcept[];\n            answer?: {\n                valueBoolean: boolean;\n                valueDecimal: number; // decimal\n                valueInteger: number; // integer\n                valueDate: Date;\n                valueDateTime: Date;\n                valueTime: Date;\n                valueString: string;\n                valueUri: string; // uri\n                valueAttachment: Attachment;\n                valueCoding: Coding;\n                valueQuantity: Quantity;\n                valueReference: Reference; // (Any)\n            }[];\n            text?: string;\n            linkId?: string[];\n            securityLabelNumber?: number[];\n        };\n        asset?: {\n            scope?: CodeableConcept;\n            type?: CodeableConcept[];\n            typeReference?: Reference[]; // (Any)\n            subtype?: CodeableConcept[];\n            relationship?: Coding;\n            context?: { // BackboneElement\n                reference?: Reference; // (Any)\n                code?: CodeableConcept[];\n                text?: string;\n            }[];\n            condition?: string;\n            periodType?: CodeableConcept[];\n            period?: Period[];\n            usePeriod?: Period[];\n            text?: string;\n            linkId?: string[];\n            answer?: Reference[]; // Reference to another Element\n            securityLabelNumber?: number[];\n            valuedItem?: { // BackboneElement\n                entityCodeableConcept?: CodeableConcept;\n                entityReference?: Reference; // (Any)\n                identifier?: Identifier;\n                effectiveTime?: Date;\n                quantity?: SimpleQuantity;\n                unitPrice?: Money;\n                factor?: number; // decimal\n                points?: number; // decimal\n                net?: Money;\n                payment?: string;\n                paymentDate?: Date;\n                responsible?: Reference; // (Organization | Patient | Practitioner | PractitionerRole | RelatedPerson)\n                recipient?: Reference; // (Organization | Patient | Practitioner | PractitionerRole | RelatedPerson)\n                linkId?: string[];\n                securityLabelNumber?: number[];\n            }[];\n        }[];\n        action?: { // BackboneElement\n            doNotPerform?: boolean;\n            type: CodeableConcept;\n            subject?: {\n                reference: Reference[]; // (Patient | RelatedPerson | Practitioner | PractitionerRole | Device | Group | Organization)\n                role?: CodeableConcept;\n            }[];\n            intent: CodeableConcept;\n            linkId?: string[];\n            status: CodeableConcept;\n            context?: Reference; // (Encounter | EpisodeOfCare)\n            contextLinkId?: string[];\n            occurrenceDateTime?: Date;\n            occurrencePeriod?: Period;\n            occurrenceTiming?: Timing;\n            requester?: Reference[]; // (Patient | RelatedPerson | Practitioner | PractitionerRole | Device | Group | Organization)\n            requesterLinkId?: string[];\n            performerType?: CodeableConcept[];\n            performerRole?: CodeableConcept;\n            performer?: Reference; // (RelatedPerson | Patient | Practitioner | PractitionerRole | CareTeam | Device | Substance | Organization | Location)\n            performerLinkId?: string[];\n            reasonCode?: CodeableConcept[];\n            reasonReference?: Reference[]; // (Condition | Observation | DiagnosticReport | DocumentReference | Questionnaire | QuestionnaireResponse)\n            reason?: string[];\n            reasonLinkId?: string[];\n            note?: Annotation[];\n            securityLabelNumber?: number[];\n        }[];\n        group?: Reference[]; // Reference to another Element\n    }[];\n    supportingInfo?: Reference[]; // (Any)\n    relevantHistory?: Reference[]; // (Provenance)\n    signer?: { // BackboneElement\n        type: Coding;\n        party: Reference; // (Organization | Patient | Practitioner | PractitionerRole | RelatedPerson)\n        signature: Signature[];\n    }[];\n    friendly?: { // BackboneElement\n        contentAttachment: Attachment;\n        contentReference: Reference; // (Composition | DocumentReference | QuestionnaireResponse)\n    }[];\n    legal?: {\n        contentAttachment: Attachment;\n        contentReference: Reference; // (Composition | DocumentReference | QuestionnaireResponse)\n    }[];\n    rule?: {\n        contentAttachment: Attachment;\n        contentReference: Reference; // (DocumentReference)\n    }[];\n    legallyBindingAttachment?: Attachment;\n    legallyBindingReference?: Reference; // (Composition | DocumentReference | QuestionnaireResponse | Contract)\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, ContactDetail, Identifier, UsageContext} from '../terminology';\nimport {Period} from '../period';\nimport {Reference} from '../reference';\nimport {Money} from '../money';\n\nexport class ChargeItemDefinition extends DomainResource {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n\n    url: string;\n    identifier?: Identifier[];\n    version?: string;\n    title?: string;\n    derivedFromUri?: string[];\n    partOf?: string[];\n    replaces?: string[];\n    status: 'draft' | 'active' | 'retired' | 'unknown';\n    experimental?: boolean;\n    date?: Date;\n    publisher?: string;\n    contact?: ContactDetail[];\n    description?: string;\n    useContext?: UsageContext[];\n    jurisdiction?: CodeableConcept[];\n    copyright?: string;\n    approvalDate?: Date;\n    lastReviewDate?: Date;\n    effectivePeriod?: Period;\n    code?: CodeableConcept;\n    instance?: Reference[];\n    applicability?: {   // BackboneElement\n        description?: string;\n        language?: string;\n        expression?: string;\n    }[];\n    propertyGroup?: { // BackboneElemen\n        applicability?: string[];\n        priceComponent?: {\n            type: 'base' | 'surcharge' | 'deduction' | 'discount' | 'tax' | 'informational';\n            code?: CodeableConcept;\n            factor?: number; // decimal\n            amount?: Money;\n        }[];\n    }[];\n}\n","import {Element} from './element';\nimport {Coding} from './terminology/coding';\nimport {Reference} from './reference';\n\nexport class Signature extends Element {\n    type: Coding[];\n    when: Date;\n    who: Reference; // (Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization)\n    onBehalfOf?: Reference; // (Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization)\n    targetFormat?: string;\n    sigFormat?: string;\n    data?: string; // base64Binary Regex: (\\s*([0-9a-zA-Z\\+\\=]){4}\\s*)+\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept} from '..';\n\nexport class OperationOutcome extends DomainResource {\n    issue: { // BackboneElement\n        severity: 'fatal' | 'error' | 'warning' | 'information';\n        code: string;\n        details?: CodeableConcept;\n        diagnostics?: string;\n        location?: string[];\n        expression?: string[];\n    }[];\n}\n","import {Element} from '../element';\nimport {Reference} from '../reference';\n\nexport class Annotation extends Element {\n    constructor(source?: any) {\n        super();\n        if (source)\n            for (const key of Object.keys(source)) {\n                this[key] = source[key];\n            }\n    }\n    authorReference?: Reference; // (Practitioner | Patient | RelatedPerson | Organization)\n    authorString?: string;\n    time?: Date;\n    text: string;\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\n\nexport class Appointment extends DomainResource {\n    resourceType: string = 'Appointment';\n    identifier?: Identifier[];\n    status: 'proposed' | 'pending' | 'booked' | 'arrived' | 'fulfilled' | 'cancelled' | 'noshow' | 'entered-in-error' | 'checked-in' | 'waitlist';\n    cancelationReason?: CodeableConcept;\n    serviceCategory?: CodeableConcept[];\n    serviceType?: CodeableConcept[];\n    specialty?: CodeableConcept[];\n    appointmentType?: CodeableConcept;\n    reasonCode?: CodeableConcept[];\n    reasonReference?: Reference[]; // (Condition | Procedure | Observation | ImmunizationRecommendation)\n    priority?: number; // unsignedInt [0]|([1-9][0-9]*)\n    description?: string;\n    supportingInformation?: Reference[]; // (Any)\n    start?: Date; // instant Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\n    end?: Date; // instant\n    minutesDuration?: number; // positiveInt\n    slot?: Reference[]; // (Slot)\n    created?: Date;\n    comment?: string;\n    patientInstruction?: string;\n    basedOn?: Reference[]; // (ServiceRequest)\n    participant: { // BackboneElement\n        type?: CodeableConcept[];\n        actor?: Reference; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Device | HealthcareService | Location)\n        required?: 'required' | 'optional' | 'information-only';\n        status: 'accepted' | 'declined' | 'tentative' | 'needs-action';\n        period?: Period;\n    }[];\n    requestedPeriod?: Period[];\n\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Reference} from '..';\n\nexport class AppointmentResponse extends DomainResource {\n    resourceType: string = 'AppointmentResponse';\n    identifier?: Identifier[];\n    appointment: Reference; // (Appointment)\n    start?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\n    end?: Date;\n    participantType?: CodeableConcept[];\n    actor?: Reference; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Device | HealthcareService | Location)\n    participantStatus: 'accepted' | 'declined' | 'tentative' | 'in-process' | 'completed' | 'needs-action' | 'entered-in-error';\n    comment?: string;\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\n\nexport class Schedule extends DomainResource {\n    resourceType: string = 'Schedule';\n    identifier?: Identifier[];\n    active?: boolean;\n    serviceCategory?: CodeableConcept[];\n    serviceType?: CodeableConcept[];\n    specialty?: CodeableConcept[];\n    actor: Reference[]; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Device | HealthcareService | Location)\n    planningHorizon?: Period;\n    comment?: string;\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Reference} from '..';\n\nexport class Slot extends DomainResource {\n    resourceType: string = 'Slot';\n    identifier?: Identifier[];\n    serviceCategory?: CodeableConcept[];\n    serviceType?: CodeableConcept[];\n    specialty?: CodeableConcept[];\n    appointmentType?: CodeableConcept;\n    schedule: Reference;\n    status: 'busy' | 'free' | 'busy-unavailable' | 'busy-tentative' | 'entered-in-error';\n    start: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\n    end: Date;\n    overbooked?: boolean;\n    comment?: string;\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, Period, Reference} from '..';\nimport {Annotation} from './annotation';\n\nexport class Task extends DomainResource {\n    resourceType: string = 'Task';\n    identifier?: Identifier[];\n    instantiatesCanonical?: string; // canonical(ActivityDefinition)\n    instantiatesUri?: string; // uri\n    basedOn?: Reference[]; // (Any)\n    groupIdentifier?: Identifier;\n    partOf?: Reference[]; // (Task)\n    status: 'draft' | 'requested' | 'received' | 'accepted' | '+'; // TaskStatus (Required)\n    statusReason?: CodeableConcept;\n    businessStatus?: CodeableConcept;\n    intent: 'unknown' | 'proposal' | 'plan' | 'order' | 'original-order' | 'reflex-order' | 'filler-order' | 'instance-order' | 'option';\n    priority?: 'routine' | 'urgent' | 'asap' | 'stat';\n    code?: CodeableConcept;\n    description?: string;\n    focus?: Reference; // (Any)\n    for?: Reference; // (Any)\n    encounter?: Reference; // (Encounter)\n    executionPeriod?: Period;\n    authoredOn?: Date;\n    lastModified?: Date;\n    requester?: Reference; // (Device | Organization | Patient | Practitioner | PractitionerRole | RelatedPerson)\n    performerType?: CodeableConcept[];\n    owner?: Reference; // (Practitioner | PractitionerRole | Organization | CareTeam | HealthcareService | Patient | Device | RelatedPerson)\n    location?: Reference; // (Location)\n    reasonCode?: CodeableConcept;\n    reasonReference?: Reference; // (Any)\n    insurance?: Reference; // (Coverage | ClaimResponse)\n    note?: Annotation[];\n    relevantHistory?: Reference[]; // (Provenance)\n    restriction?: { // BackboneElement\n        repetitions?: number // positiveInt Regex: +?[1-9][0-9]*\n        period?: Period;\n        recipient?: Reference[]; // (Patient | Practitioner | PractitionerRole | RelatedPerson | Group | Organization)\n    };\n    input?: { // BackboneElement\n        type: CodeableConcept;\n        valueString: string; // *\n    }[];\n    output?: { // BackboneElement\n        type: CodeableConcept;\n        valueString: string; // *\n    }[];\n}\n","import {DomainResource} from '../domain-resource';\nimport {Reference} from '../reference';\nimport {CodeableConcept, Signature} from '..';\nimport {Timing} from '../timing';\n\nexport class VerificationResult extends DomainResource {\n    resourceType: string = 'VerificationResult';\n    target?: Reference[]; // (Any)\n    targetLocation?: string[];\n    need?: CodeableConcept; // none | initial | periodic\n    status: 'attested' | 'validated' | 'in-process' | 'req-revalid' | 'val-fail' | 'reval-fail';\n    statusDate?: Date;\n    validationType?: CodeableConcept; // nothing | primary | multiple\n    validationProcess?: CodeableConcept[];\n    frequency?: Timing;\n    lastPerformed?: Date;\n    nextScheduled?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n    failureAction?: CodeableConcept;\n    primarySource?: { // BackboneElement\n        who?: Reference; // (Organization | Practitioner | PractitionerRole)\n        type?: CodeableConcept[];\n        communicationMethod?: CodeableConcept[];\n        validationStatus?: CodeableConcept; // successful | failed | unknown\n        validationDate?: Date;\n        canPushUpdates?: CodeableConcept; // yes | no | undetermined\n        pushTypeAvailable?: CodeableConcept[];\n    }[];\n    attestation?: { // BackboneElement\n        who?: Reference; // (Practitioner | PractitionerRole | Organization)\n        onBehalfOf?: Reference; // (Organization | Practitioner | PractitionerRole)\n        communicationMethod?: CodeableConcept;\n        date?: Date; // Regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\n        sourceIdentityCertificate?: string;\n        proxyIdentityCertificate?: string;\n        proxySignature?: Signature;\n        sourceSignature?: Signature;\n    };\n    validator?: { // BackboneElement\n        organization: Reference; // (Organization)\n        identityCertificate?: string;\n        attestationSignature?: Signature;\n    }[];\n}\n","import {BackboneElement} from './terminology/backboneelement';\nimport {Range} from './range';\nimport {Period} from './period';\nimport {CodeableConcept} from './terminology/codeableconcept';\n\nexport class Timing extends BackboneElement {\n  constructor(source?: any) {\n    super();\n    if (source)\n      for (const key of Object.keys(source)) {\n        this[key] = source[key];\n      }\n  }\n  event?: Date[];\n  repeat?: { // Element\n    boundsDuration?: Date;\n    boundsRange?: Range;\n    boundsPeriod?: Period;\n    count?: number; // positiveInt Regex: +?[1-9][0-9]*\n    countMax?: number;\n    duration?: number; // decimal Regex: -?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    durationMax?: number;\n    durationUnit?: 's' | 'min' | 'h' | 'd' | 'wk' | 'mo' | 'a'; // unit of time (UCUM)\n    frequency?: number; // positiveInt Regex: +?[1-9][0-9]*\n    frequencyMax?: number;\n    period?: number; // decimal Regex: -?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\n    periodMax?: number;\n    periodUnit?: 's' | 'min' | 'h' | 'd' | 'wk' | 'mo' | 'a'; // unit of time (UCUM)\n    dayOfWeek?: string[];\n    timeOfDay?: Date[]; // Regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\n    when?: string[]; // Regex: [^\\s]+(\\s[^\\s]+)*\n    offset?: number; // unsignedInt Regex: [0]|([1-9][0-9]*)\n  };\n  code?: CodeableConcept;\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier, SimpleQuantity} from '../terminology';\nimport {Ratio} from '../ratio';\nimport {Reference} from '../reference';\n\nexport class Substance extends DomainResource {\n    identifier?: Identifier[];\n    status?: 'active' | 'inactive' | 'entered-in-error';\n    category?: CodeableConcept[];\n    code: CodeableConcept;\n    description?: string;\n    instance?: { // BackboneElement\n        identifier?: Identifier;\n        expiry?: Date;\n        quantity?: SimpleQuantity;\n    }[];\n    ingredient?: { // BackboneElement\n        quantity?: Ratio;\n        substanceCodeableConcept?: CodeableConcept;\n        substanceReference?: Reference;\n    }[];\n}\n","import {DomainResource} from '../domain-resource';\nimport {CodeableConcept, Identifier} from '../terminology';\nimport {Reference} from '../reference';\nimport {Money} from '../money';\nimport {Annotation} from '../workflow';\n\nexport class Invoice extends DomainResource {\n    resourceType: string = 'Invoice';\n    identifier?: Identifier[];\n    status: 'draft' | 'issued' | 'balanced' | 'cancelled' | 'entered-in-error';\n    cancelledReason?: string;\n    type?: CodeableConcept;\n    subject?: Reference;\n    recipient?: Reference;\n    date?: Date;\n    participant?: { // BackboneElement\n        role?: CodeableConcept;\n        actor: Reference;\n    }[];\n    issuer?: Reference;\n    account?: Reference;\n    lineItem?: { // BackboneElement\n        sequence?: number;\n        chargeItemReference: Reference;\n        chargeItemCodeableConcept: CodeableConcept;\n        priceComponent?: { // BackboneElement\n            type: 'base' | 'surcharge' | 'deduction' | 'discount' | 'tax' | 'informational';\n            code?: CodeableConcept;\n            factor?: number;\n            amount?: Money;\n        }[];\n    }[];\n    totalPriceComponent?: Reference[];\n    totalNet?: Money;\n    totalGross?: Money;\n    paymentTerms?: string;\n    note?: Annotation[];\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {FhirQueryBuilder} from './query-builder/fhir-query-builder';\nimport {SearchSet} from './search-set/search-set';\nimport {BundleEntry, CapabilityStatement, OperationOutcome} from './model';\nimport {FHIR_CONFIG, FhirConfig} from '../fhir-config';\nimport {tap} from 'rxjs/operators';\nimport {Bundle} from './model';\nimport {merge} from 'lodash';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FhirService {\n    public headers;\n    private conformance: CapabilityStatement;\n\n    constructor(@Inject(FHIR_CONFIG) public config: FhirConfig, public httpClient: HttpClient) {\n    }\n\n    set base(base: string) {\n        this.config.base = base;\n    }\n\n    getConformanceStatement(headers?): Observable<CapabilityStatement> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        if (this.conformance) return of(this.conformance);\n        return this.httpClient.get<CapabilityStatement>(`${this.config.base}/metadata`, {headers: mergedHeaders}).pipe(\n            tap(result => this.conformance = result),\n        );\n    }\n\n    public read<T>(resourceType: string, id: string, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.get<T>(`${this.config.base}/${resourceType}/${id}`, {headers: mergedHeaders});\n    }\n\n    public vread<T>(resourceType: string, id: string, v: number, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.get<T>(`${this.config.base}/${resourceType}/${id}/_history/${v}`, {headers: mergedHeaders});\n    }\n\n    public update<T>(resource: any, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.put<T>(`${this.config.base}/${resource.resourceType}/${resource.id}`, resource, {headers: mergedHeaders});\n    }\n\n    public save<T>(resource: any, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        const resourceType = resource.resourceType;\n        if (resource.hasOwnProperty('id')) {\n            return this.update(resource, headers);\n        } else {\n            return this.create(resource, headers);\n        }\n    }\n\n    public patch<T>(resource: any, body: any, headers?): Observable<T> {\n        const headersToAttach = {};\n        merge(headersToAttach, this.headers);\n        headersToAttach['Content-Type'] = 'application/json-patch+json';\n        return this.httpClient.patch<T>(`${this.config.base}/${resource.resourceType}/${resource.id}`, body, {headers: headersToAttach});\n    }\n\n    public delete<T>(resourceType: string, id: string, headers?): Observable<OperationOutcome> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.delete<OperationOutcome>(`${this.config.base}/${resourceType}/${id}`, {headers: mergedHeaders});\n    }\n\n    public create<T>(resource: any, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.post<T>(`${this.config.base}/${resource.resourceType}`, resource, {headers: mergedHeaders});\n    }\n\n    // ToDo:\n    public searchByQuery(qb: FhirQueryBuilder, headers?): Observable<Bundle> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.get<Bundle>(`${this.config.base}/${qb.resourceName}`, {\n            params: qb.paramsAsHttpParams(),\n            headers: mergedHeaders\n        });\n    }\n\n    public searchBySet<T>(ss: SearchSet, headers?): Observable<Bundle> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.get<Bundle>(`${this.config.base}/${ss.resourceName}?_sort=-_id`, {\n            params: ss.paramsAsObject(),\n            headers: mergedHeaders,\n        });\n    }\n\n    public searchByUrl<T>(url: string, headers?): Observable<T> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.get<T>(url, {headers: mergedHeaders});\n    }\n\n    public search_all() {\n\n    }\n\n    public capabilities() {\n\n    }\n\n    public transaction(bundle: Bundle, headers?): Observable<any> {\n        const mergedHeaders = Object.assign(this.headers, headers);\n        return this.httpClient.post(this.config.base, bundle,\n            {\n                headers: mergedHeaders\n            });\n    }\n\n    public history() {\n\n    }\n\n    public history_type() {\n\n    }\n\n    public history_all() {\n\n    }\n\n    public executeQuery<T>(qb: FhirQueryBuilder): Observable<T> {\n        return this.httpClient.get<T>(qb.query, {headers: this.headers});\n    }\n\n    public createTransactionBundle(source: any, keys: string[]): Bundle {\n        const bundle: Bundle = new Bundle();\n        bundle.type = 'transaction';\n        bundle.resourceType = 'Bundle';\n        bundle.entry = [];\n        keys.filter(key => source.hasOwnProperty(key))\n            .map(key => {\n                const v = source[key];\n                if (this.isIterable(v)) {\n                    for (const e of v) {\n                        bundle.entry.push(this.createBundleEntry(e));\n                    }\n                } else {\n                    bundle.entry.push(this.createBundleEntry(v));\n                }\n            });\n        return bundle;\n    }\n\n    private isIterable(value) {\n        return value !== null && Symbol.iterator in Object(value);\n    }\n\n    private createBundleEntry(entry): BundleEntry {\n        return {\n            fullUrl: `urn:uuid:${entry.uuid}`,\n            resource: entry,\n            request: {\n                url: !entry.id ? entry.resourceType : `${entry.resourceType}/${entry.id}`,\n                method: entry.id ? 'PUT' : 'POST',\n            },\n        };\n    }\n\n    /*generateCodeableConcept(code: string, system?: string, display?: string): CodeableConcept {\n        const codeableConcept: CodeableConcept = new CodeableConcept();\n        codeableConcept.coding = [{code: code}];\n        if (system) codeableConcept.coding[0].system = system;\n        if (display) codeableConcept.coding[0].display = display;\n        return codeableConcept;\n    }\n\n    generateIdentifier(): Identifier {\n        const identifier: Identifier = new Identifier();\n        identifier.system = FhirService.IdentifierSystem;\n        identifier.value = UUID.UUID();\n        return identifier;\n    }*/\n}\n\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {FHIR_CONFIG, FhirConfig} from '../fhir-config';\nimport {FhirService} from './fhir-service';\nimport {Observable} from 'rxjs';\nimport {Encounter} from './model/management';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FhirAdvancedService extends FhirService {\n\n    headers: any;\n    fhircqrs: string;\n\n    constructor(@Inject(FHIR_CONFIG) public config: FhirConfig, public httpClient: HttpClient) {\n        super(config, httpClient);\n        this.fhircqrs = config.fhircqrs;\n    }\n\n    public setAuthentication(headers: any) {\n        this.headers = headers;\n    }\n\n    public searchInConcept(part: string, id: string, version?: string): Observable<ConceptDto[]> {\n        return this.httpClient\n            .get<ConceptDto[]>(`${this.fhircqrs}/CodeSystem/searchInConcept`,\n                {headers: this.headers, params: {part: part, id: id, version: version}},\n            );\n    }\n\n    public findActiveEncounterByPatient(patientId: string): Observable<Encounter[]> {\n        return this.httpClient\n            .get<Encounter[]>(`${this.fhircqrs}/Encounter/findActiveEncounterByPatient`,\n                {headers: this.headers, params: {patientId: patientId}},\n            );\n    }\n\n}\n\nexport class ConceptDto {\n    system: string;\n    code: string;\n    display: string;\n    definition: string;\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'fhirAddressLineExtract',\n})\nexport class FhirAddressLineExtract implements PipeTransform {\n\n    transform(value: any, ...args: any[]): string {\n        if (value && value[0] && value[0].line && value[0].line[0]) return value[0].line[0];\n        return '';\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fhirContactExtract'\n})\nexport class FhirContactExtractPipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): string {\n    if (value && value.contact && value.contact[0] && value.contact[0].name) {\n      return `${value.contact[0].name.prefix} ${value.contact[0].name.given[0]} ${value.contact[0].name.family}`;\n    }\n    return '';\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {Dosage} from '../model/medications';\n\n@Pipe({\n    name: 'fhirDosageExctract',\n})\nexport class FhirDosageExctractPipe implements PipeTransform {\n\n    transform(value: any, ...args: any[]): string {\n        let result: any = '';\n        const v = value as Dosage[];\n        if (v && args && args.length > 0) {\n\n            if (v[0] && v[0].doseAndRate && args[0] === 'doseQuantityValue') {\n                result = v[0].doseAndRate[0].doseQuantity.value;\n            }\n            if (v[0] && v[0].doseAndRate && args[0] === 'doseQuantityUnit') {\n                result = v[0].doseAndRate[0].doseQuantity.unit;\n            }\n            if (v[0] && v[0].doseAndRate && args[0] === 'rateQuantityValue') {\n                result = v[0].doseAndRate[0].rateQuantity.value;\n            }\n            if (v[0] && v[0].doseAndRate && args[0] === 'rateQuantityUnit') {\n                result = v[0].doseAndRate[0].rateQuantity.unit;\n            }\n            if (v[0] && v[0].maxDosePerAdministration && args[0] === 'maxDoseValue') {\n                result = v[0].maxDosePerAdministration.value;\n            }\n            if (v[0] && v[0].maxDosePerAdministration && args[0] === 'maxDoseUnit') {\n                result = v[0].maxDosePerAdministration.unit;\n            }\n            if (v[0] && args[0] === 'text') {\n                result = v[0].text;\n            }\n        }\n        return result;\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'fhirEmailExtract'\n})\nexport class FhirEmailExtractPipe implements PipeTransform {\n\n    transform(value: any, ...args: any[]): string {\n        let email: string = '';\n        if (value && value.length > 0) {\n            for (let contactPoint of value) {\n                if (contactPoint.system === 'email') email = email.concat(contactPoint.value, ', ');\n            }\n        }\n        return email.trim().slice(0, email.length - 2);\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'fhirNameExtract',\n})\nexport class FhirNameExtractPipe implements PipeTransform {\n\n    transform(value: any, ...args: any[]): string {\n        const p = value;\n        if (p && p.hasOwnProperty('name') && p.name.length > 0) {\n            return `${p.name[0].given[0]} ${p.name[0].family}`;\n        }\n        return '';\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'fhirTelecomPhoneExtract'\n})\nexport class FhirTelecomPhoneExtract implements PipeTransform {\n\n  transform(value: any, ...args: any[]): string {\n    let phone: string = '';\n    if (value && value.length > 0) {\n      for (let contactPoint of value) {\n        if (contactPoint.system === 'phone') phone = phone.concat(contactPoint.value, ', ');\n      }\n    }\n    return phone.trim().slice(0,phone.length-2);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fhirTelecomWebExtract'\n})\nexport class FhirTelecomWebExtractPipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): string {\n    let url: string = '';\n    if (value && value.length > 0) {\n      for (let contactPoint of value) {\n        if (contactPoint.system === 'url') url = url.concat(contactPoint.value, ', ');\n      }\n    }\n    return url.trim().slice(0,url.length-2);\n  }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {FHIR_CONFIG, FhirConfig} from './fhir/fhir-config';\nimport {FhirService} from './fhir/r4/fhir-service';\nimport {FhirAdvancedService} from './fhir/r4/fhir-advanced.service';\nimport {FhirAddressLineExtract} from './fhir/r4/fhir-pipes/fhir-address-line-extract.pipe';\nimport {FhirContactExtractPipe} from './fhir/r4/fhir-pipes/fhir-contact-extract.pipe';\nimport {FhirDosageExctractPipe} from './fhir/r4/fhir-pipes/fhir-dosage-exctract.pipe';\nimport {FhirEmailExtractPipe} from './fhir/r4/fhir-pipes/fhir-email-extract.pipe';\nimport {FhirNameExtractPipe} from './fhir/r4/fhir-pipes/fhir-patient-name-extract.pipe';\nimport {FhirTelecomPhoneExtract} from './fhir/r4/fhir-pipes/fhir-telecom-phone-extract.pipe';\nimport {FhirTelecomWebExtractPipe} from './fhir/r4/fhir-pipes/fhir-telecom-web-extract.pipe';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n        declarations: [\n            FhirAddressLineExtract,\n            FhirContactExtractPipe,\n            FhirDosageExctractPipe,\n            FhirEmailExtractPipe,\n            FhirNameExtractPipe,\n            FhirTelecomPhoneExtract,\n            FhirTelecomWebExtractPipe,\n        ],\n        imports: [\n            CommonModule,\n        ],\n        exports: [\n            FhirAddressLineExtract,\n            FhirContactExtractPipe,\n            FhirDosageExctractPipe,\n            FhirEmailExtractPipe,\n            FhirNameExtractPipe,\n            FhirTelecomPhoneExtract,\n            FhirTelecomWebExtractPipe,\n        ],\n    },\n)\nexport class LmsNgFhirModule {\n\n    public static forRoot(config: FhirConfig): ModuleWithProviders {\n\n        return <ModuleWithProviders>{\n            ngModule: LmsNgFhirModule,\n            providers: [\n                FhirService,\n                FhirAdvancedService,\n                {\n                    provide: FHIR_CONFIG,\n                    useValue: config,\n                },\n            ],\n        };\n    }\n}\n","import {HttpParams} from \"@angular/common/http\";\n\nexport class InstanceLevelInteractions {\n    public static read: number = 0;\n    public static vread: number = 1;\n    public static update: number = 2;\n    public static patch: number = 3;\n    public static delete: number = 4;\n    public static history: number = 5;\n    public static create: number = 6;\n}\n\nexport class TypeLevelInteractions {\n    public static create: number = 10;\n    public static search: number = 11;\n    public static history: number = 12;\n}\n\nexport class WholeSystemInteractions {\n    public static capabilities: number = 21;\n    public static batch: number = 22;\n    public static search: number = 23;\n    public static history: number = 24;\n}\n\nexport class CommonSearchParameters {\n    public static _id: string = '_id';\n    public static _lastUpdated: string = '_lastUpdated';\n    public static _tag: string = '_tag';\n    public static _profile: string = '_profile';\n    public static _security: string = '_security';\n    public static _text: string = '_text';\n    public static _content: string = '_content';\n    public static _list: string = '_list';\n    public static _query: string = '_query';\n}\n\nexport class SearchControlParameters {\n\n}\n\nexport class FhirQueryBuilder {\n\n    private readonly _baseUrl: string = '';\n    private _resourceName: string;\n    private _params = [];\n    private _fhirOperation: number;\n\n    constructor(baseUrl?: string) {\n        this._baseUrl = baseUrl;\n    }\n\n    public static getInstance(baseUrl?: string): FhirQueryBuilder {\n        return new FhirQueryBuilder(baseUrl);\n    }\n\n    get resourceName(): string {\n        return this._resourceName;\n    }\n\n    setResourceName(resourceName: string): FhirQueryBuilder {\n        this._resourceName = resourceName;\n        return this;\n    }\n\n    get query(): string {\n        let q = `${this._baseUrl}`;\n        switch (this._fhirOperation) {\n            case TypeLevelInteractions.search:\n                q = `${q}/${this._resourceName}?`;\n                this.params.forEach(p => {\n                    q = q + p;\n                });\n                break;\n            case InstanceLevelInteractions.read:\n                q = `${q}/${this._resourceName}/`;\n                this.params.forEach(p => {\n                    q = q + p;\n                });\n                break;\n        }\n        return q;\n    }\n\n    read(id: string): FhirQueryBuilder {\n        this._fhirOperation = InstanceLevelInteractions.read;\n        this._params.push(id);\n        return this;\n    }\n\n    search(propName: string): LeftPart {\n        this._fhirOperation = TypeLevelInteractions.search;\n        const lp: LeftPart = new LeftPart(this);\n        lp.left = propName;\n        return lp;\n    }\n\n    get params(): any[] {\n        return this._params;\n    }\n\n    and(): FhirQueryBuilder {\n        this.params.push('&');\n        return this;\n    }\n\n    append(val: string): FhirQueryBuilder {\n        this.params.push(val);\n        return this;\n    }\n\n    paramsAsObject() {\n        const res = {};\n        for (const se of this.params) {\n            if (se === '&') continue;\n            const paramParts: string[] = se.split('=');\n            res[paramParts[0]] = paramParts[1];\n        }\n        return res;\n    }\n\n    paramsAsHttpParams(): HttpParams {\n        let res = new HttpParams();\n        for (const se of this.params) {\n            if (se === '&') continue;\n            const paramParts: string[] = se.split('=');\n            res = res.append(paramParts[0], paramParts[1]);\n        }\n        return res;\n    }\n}\n\nexport class LeftPart {\n    private readonly _qb: FhirQueryBuilder;\n    left: string;\n\n    constructor(qb: FhirQueryBuilder) {\n        this._qb = qb;\n    }\n\n    eq(val: string): FhirQueryBuilder {\n        this._qb.params.push(`${this.left}=${val}`);\n        return this._qb;\n    }\n\n    contains(val: string) {\n        this._qb.params.push(`${this.left}:contains=${val}`);\n        return this._qb;\n    }\n\n    starts(val: string) {\n        this._qb.params.push(`${this.left}=${val}`);\n        return this._qb;\n    }\n\n    exact(val: string) {\n        this._qb.params.push(`${this.left}:exact=${val}`);\n        return this._qb;\n    }\n}\n","import {SearchModifier} from './search-modifier';\n\nexport class SearchItem {\n    type: 'number' | 'date' | 'string' | 'token' | 'reference' | 'composite' | 'quantity' | 'uri' | 'special';\n    key: string;\n    modifier: SearchModifier;\n    value: string;\n    options: any;\n\n    public static init(type, key, modifier, value): SearchItem {\n        const item: SearchItem = new SearchItem();\n        item.type = type;\n        item.key = key;\n        item.modifier = modifier;\n        item.value = value;\n        return item;\n    }\n\n    setType(value: 'number' | 'date' | 'string' | 'token' | 'reference' | 'composite' | 'quantity' | 'uri' | 'special'): SearchItem {\n        this.type = value;\n        return this;\n    }\n\n    setKey(value: string): SearchItem {\n        this.key = value;\n        return this;\n    }\n\n    setModifier(value: SearchModifier): SearchItem {\n        this.modifier = value;\n        return this;\n    }\n\n    setValue(value: string): SearchItem {\n        this.value = value;\n        return this;\n    }\n\n    setOptions(value: any): SearchItem {\n        this.options = value;\n        return this;\n    }\n\n    compileKey(): string {\n        return this.modifier.compileKey(this);\n    }\n\n    compileValue(): string {\n        return this.modifier.compileValue(this);\n    }\n}\n","import { SearchModifier } from '../search-modifier';\nimport { SearchItem } from '../search-item';\n\nexport class EqualSearchModifier implements SearchModifier {\n    type: string;\n\n    compileKey(si: SearchItem): string {\n        return si.key;\n    }\n\n    compileValue(si: SearchItem): string {\n        return si.value;\n    }\n\n\n}\n","import { SearchModifier } from '../search-modifier';\nimport { SearchItem } from '../search-item';\n\nexport class StringContainsSearchModifier implements SearchModifier {\n  type: string;\n\n  compileKey(si: SearchItem): string {\n    return si.key + ':contains';\n  }\n\n  compileValue(si: SearchItem): string {\n    return si.value;\n  }\n}\n","import { SearchModifier } from '../search-modifier';\nimport { SearchItem } from '../search-item';\n\nexport class StringExactSearchModifier implements SearchModifier {\n  type: string;\n\n  compileKey(si: SearchItem): string {\n    return si.key + ':exact';\n  }\n\n  compileValue(si: SearchItem): string {\n    return si.value;\n  }\n}\n","import { EqualSearchModifier } from './modifiers/equal-search-modifier';\nimport { StringContainsSearchModifier } from './modifiers/string-contains-search-modifier';\nimport { StringExactSearchModifier } from './modifiers/string-exact-search-modifier';\n\nexport class SearchModifiers {\n  public static MODIFIERS = {\n    'EQUAL': new EqualSearchModifier(),\n    'STRING:CONTAINS': new StringContainsSearchModifier(),\n    'STRING:EXACT': new StringExactSearchModifier(),\n  };\n\n  public static STRING = [\n    {\n      key: '',\n      display: 'modifier_starts',\n    },\n    {\n      key: ':contains',\n      display: 'modifier_contains',\n    },\n    {\n      key: ':exact',\n      display: 'modifier_exact',\n    },\n  ];\n  public static TOKEN = [\n    {\n      key: '',\n      display: 'modifier_exact',\n    },\n    {\n      key: ':template',\n      display: 'modifier_text',\n    },\n    {\n      key: ':not',\n      display: 'modifier_not',\n    },\n    {\n      key: ':above',\n      display: 'modifier_above',\n    },\n    {\n      key: ':below',\n      display: 'modifier_below',\n    },\n    {\n      key: ':in',\n      display: 'modifier_in',\n    },\n    {\n      key: ':not-in',\n      display: 'modifier_notIn',\n    },\n  ];\n  public static DATE = [\n    {\n      key: 'eq',\n      display: 'modifier_exact',\n    },\n    {\n      key: 'ne',\n      display: 'modifier_not',\n    },\n    {\n      key: 'gt',\n      display: 'modifier_greater_than',\n    },\n    {\n      key: 'lt',\n      display: 'modifier_less_than',\n    },\n    {\n      key: 'ge',\n      display: 'modifier_greater_or_equal',\n    },\n    {\n      key: 'sa',\n      display: 'modifier_starts_after',\n    },\n    {\n      key: 'eb',\n      display: 'modifier_ends_before',\n    },\n    {\n      key: 'ap',\n      display: 'modifier_approximately',\n    },\n  ];\n  public static URI = [\n    {\n      key: '',\n      display: 'modifier_exact',\n    },\n    {\n      key: ':above',\n      display: 'modifier_starts',\n    },\n    {\n      key: ':below',\n      display: 'modifier_ends',\n    },\n  ];\n  public static REFERENCE = [\n    {\n      key: '',\n      display: 'modifier_ref',\n    },\n  ];\n}\n","import {SearchSet} from './search-set';\nimport {SearchItem} from './search-item';\n\nexport class SearchSetBuilder {\n\n    constructor(private ss: SearchSet) {\n    }\n\n    get(): SearchSet {\n        return this.ss;\n    }\n\n    setResourceName(resource: string): SearchSetBuilder {\n        this.ss.resourceName = resource;\n        return this;\n    }\n\n    setTitle(value: string): SearchSetBuilder {\n        this.ss.title = value;\n        return this;\n    }\n\n    setDescription(value: string): SearchSetBuilder {\n        this.ss.description = value;\n        return this;\n    }\n\n    setGetpagesoffset(value: number): SearchSetBuilder {\n        this.ss.getpagesoffset = value;\n        return this;\n    }\n\n    setCount(value: number): SearchSetBuilder {\n        this.ss.count = value;\n        return this;\n    }\n\n    addSearchItem(): SearchItem {\n        const si: SearchItem = new SearchItem();\n        this.ss.searchItems.push(si);\n        return si;\n    }\n}\n","import {SearchItem} from './search-item';\nimport {SearchSetBuilder} from './search-set-builder';\nimport {HttpParams} from '@angular/common/http';\n\nexport class SearchSet {\n\n    resourceName: string;\n    searchItems: Array<SearchItem> = [];\n    title: string;\n    description: string;\n    getpagesoffset: number;\n    count: number;\n    sort: string = '-_id';\n    direction: 'asc' | 'desc';\n\n    paramsAsObject() {\n        let so = new HttpParams();\n        for (const si of this.searchItems) {\n            so = so.append(si.compileKey(), si.compileValue());\n        }\n        if (this.getpagesoffset) so.append('_getpagesoffset', String(this.getpagesoffset));\n        if (this.count) so.append('_count', String(this.count));\n        so.append('_sort', '-_id');\n        return so;\n    }\n\n    build(): SearchSetBuilder {\n        return new SearchSetBuilder(this);\n    }\n}\n","export class ResourceTypes {\n    public static Address: string = 'Address';\n    public static Annotation: string = 'Annotation';\n    public static Appointment: string = 'Appointment';\n    public static AppointmentResponse: string = 'AppointmentResponse';\n    public static Attachment: string = 'Attachment';\n    public static BackboneElement: string = 'BackboneElement';\n    public static BodyStructure: string = 'BodyStructure';\n    public static Bundle: string = 'Bundle';\n    public static BundleEntry: string = 'BundleEntry';\n    public static CapabilityStatement: string = 'CapabilityStatement';\n    public static CodeableConcept: string = 'CodeableConcept';\n    public static CodeSystem: string = 'CodeSystem';\n    public static CodeSystemConcept: string = 'CodeSystemConcept';\n    public static Coding: string = 'Coding';\n    public static ConceptMap: string = 'ConceptMap';\n    public static ConceptMapDependsOn: string = 'ConceptMapDependsOn';\n    public static ContactDetail: string = 'ContactDetail';\n    public static ContactPoint: string = 'ContactPoint';\n    public static Contract: string = 'Contract';\n    public static DataRequirement: string = 'DataRequirement';\n    public static DiagnosticReport: string = 'DiagnosticReport';\n    public static DiagnosticsReferenceRange: string = 'DiagnosticsReferenceRange';\n    public static DomainResource: string = 'DomainResource';\n    public static Dosage: string = 'Dosage';\n    public static Duration: string = 'Duration';\n    public static Element: string = 'Element';\n    public static Encounter: string = 'Encounter';\n    public static Endpoint: string = 'Endpoint';\n    public static EpisodeOfCare: string = 'EpisodeOfCare';\n    public static Extension: string = 'Extension';\n    public static Flag: string = 'Flag';\n    public static Group: string = 'Group';\n    public static HealthcareService: string = 'HealthcareService';\n    public static HumanName: string = 'HumanName';\n    public static Identifier: string = 'Identifier';\n    public static ImagingStudy: string = 'ImagingStudy';\n    public static Library: string = 'Library';\n    public static List: string = 'List';\n    public static Location: string = 'Location';\n    public static Media: string = 'Media';\n    public static Medication: string = 'Medication';\n    public static MedicationAdministration: string = 'MedicationAdministration';\n    public static MedicationDispense: string = 'MedicationDispense';\n    public static MedicationKnowledge: string = 'MedicationKnowledge';\n    public static MedicationRequest: string = 'MedicationRequest';\n    public static MedicationStatement: string = 'MedicationStatement';\n    public static Meta: string = 'Meta';\n    public static MolecularSequence: string = 'MolecularSequence';\n    public static Money: string = 'Money';\n    public static NamingSystem: string = 'NamingSystem';\n    public static Narrative: string = 'Narrative';\n    public static Observation: string = 'Observation';\n    public static OperationOutcome: string = 'OperationOutcome';\n    public static Organization: string = 'Organization';\n    public static OrganizationAffiliation: string = 'OrganizationAffiliation';\n    public static ParameterDefinition: string = 'ParameterDefinition';\n    public static Patient: string = 'Patient';\n    public static Period: string = 'Period';\n    public static Person: string = 'Person';\n    public static Practitioner: string = 'Practitioner';\n    public static PractitionerRole: string = 'PractitionerRole';\n    public static Quantity: string = 'Quantity';\n    public static QuestionnaireResponse: string = 'QuestionnaireResponse';\n    public static QuestionnaireResponseItem: string = 'QuestionnaireResponseItem';\n    public static Range: string = 'Range';\n    public static Ratio: string = 'Ratio';\n    public static Reference: string = 'Reference';\n    public static RelatedArtifact: string = 'RelatedArtifact';\n    public static RelatedPerson: string = 'RelatedPerson';\n    public static Resource: string = 'Resource';\n    public static ResourceCapability: string = 'ResourceCapability';\n    public static SampledData: string = 'SampledData';\n    public static Schedule: string = 'Schedule';\n    public static Signature: string = 'Signature';\n    public static SimpleQuantity: string = 'SimpleQuantity';\n    public static Slot: string = 'Slot';\n    public static Specimen: string = 'Specimen';\n    public static Substance: string = 'Substance';\n    public static Task: string = 'Task';\n    public static TerminologyCapabilities: string = 'TerminologyCapabilities';\n    public static Timing: string = 'Timing';\n    public static UsageContext: string = 'UsageContext';\n    public static ValueSet: string = 'ValueSet';\n    public static ValueSetContains: string = 'ValueSetContains';\n    public static VerificationResult: string = 'VerificationResult';\n}\n"]}